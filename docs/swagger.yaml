basePath: /api
definitions:
  dto.Compilation:
    properties:
      compilation_type_id:
        example: 1
        format: int
        type: integer
      id:
        example: 1
        format: int
        type: integer
      poster:
        example: static/poster.jpg
        format: string
        type: string
      title:
        example: The Best
        format: string
        type: string
    type: object
  dto.CompilationResponseList:
    properties:
      compilations:
        items:
          $ref: '#/definitions/dto.Compilation'
        type: array
    type: object
  dto.CompilationType:
    properties:
      id:
        example: 1
        format: int
        type: integer
      type:
        example: C
        format: string
        type: string
    type: object
  dto.CompilationTypeResponseList:
    properties:
      compilation_types:
        items:
          $ref: '#/definitions/dto.CompilationType'
        type: array
    type: object
  dto.Content:
    properties:
      actors:
        items:
          $ref: '#/definitions/dto.PersonPreview'
        type: array
      ageRestriction:
        example: 18
        type: integer
      backdropURL:
        example: /static/backdrop.jpg
        type: string
      budget:
        example: "1000000"
        type: string
      composers:
        items:
          $ref: '#/definitions/dto.PersonPreview'
        type: array
      countries:
        example:
        - Россия
        - США
        items:
          type: string
        type: array
      description:
        example: Описание фильма или сериала
        type: string
      directors:
        items:
          $ref: '#/definitions/dto.PersonPreview'
        type: array
      editors:
        items:
          $ref: '#/definitions/dto.PersonPreview'
        type: array
      facts:
        example:
        - Факты о фильме или сериале
        items:
          type: string
        type: array
      genres:
        example:
        - Боевик
        - Драма
        items:
          type: string
        type: array
      id:
        example: 1
        type: integer
      imdbRating:
        example: 9.1
        type: number
      movie:
        $ref: '#/definitions/dto.MovieContent'
      operators:
        items:
          $ref: '#/definitions/dto.PersonPreview'
        type: array
      originalTitle:
        example: Batman
        type: string
      picturesURL:
        example:
        - /static/picture1.jpg
        - /static/picture2.jpg
        items:
          type: string
        type: array
      posterURL:
        example: /static/poster.jpg
        type: string
      producers:
        items:
          $ref: '#/definitions/dto.PersonPreview'
        type: array
      rating:
        example: 9.1
        type: number
      series:
        $ref: '#/definitions/dto.SeriesContent'
      slogan:
        example: I'm Batman
        type: string
      title:
        example: Бэтмен
        type: string
      trailerLink:
        example: https://www.youtube.com/watch?v=123456
        type: string
      type:
        example: movie
        type: string
      writers:
        items:
          $ref: '#/definitions/dto.PersonPreview'
        type: array
    type: object
  dto.CreateFavouriteRequest:
    properties:
      category:
        description: nolint:lll
        example: favourite
        format: string
        type: string
      contentID:
        example: 1
        format: int
        type: integer
    type: object
  dto.Episode:
    properties:
      duration:
        example: 45
        type: integer
      episodeNumber:
        example: 1
        type: integer
      id:
        example: 1
        type: integer
      title:
        example: Название серии
        type: string
    type: object
  dto.Favourite:
    properties:
      category:
        description: nolint:lll
        example: favourite
        format: string
        type: string
      contentID:
        example: 1
        format: int
        type: integer
    type: object
  dto.FavouriteStatusResponse:
    properties:
      status:
        description: nolint:lll
        example: favourite
        format: string
        type: string
    type: object
  dto.FavouritesResponse:
    properties:
      favourites:
        items:
          $ref: '#/definitions/dto.Favourite'
        type: array
    type: object
  dto.Login:
    properties:
      login:
        example: email@email.com
        format: string
        type: string
      password:
        example: SecretPassword1!
        format: string
        type: string
    type: object
  dto.MovieContent:
    properties:
      duration:
        example: 134
        type: integer
      premiere:
        example: "2020-01-01"
        type: string
    type: object
  dto.Person:
    properties:
      birthDate:
        example: "1964-09-02"
        type: string
      deathDate:
        example: "2021-09-02"
        type: string
      enName:
        example: Keanu Reeves
        type: string
      height:
        example: 185
        type: integer
      id:
        example: 1
        type: integer
      name:
        example: Киану Ривз
        type: string
      photoURL:
        example: /static/photo.jpg
        type: string
      roles:
        additionalProperties:
          $ref: '#/definitions/dto.PreviewContentCardVertical'
        type: object
      sex:
        example: M
        type: string
    type: object
  dto.PersonPreview:
    properties:
      enName:
        example: Keanu Reeves
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Киану Ривз
        type: string
    type: object
  dto.PersonPreviewWithPhoto:
    properties:
      enName:
        example: Keanu Reeves
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Киану Ривз
        type: string
      photoURL:
        example: /static/photo.jpg
        type: string
    type: object
  dto.PreviewContentCard:
    properties:
      actors:
        example:
        - Том Хэнкс
        - Сергей Бодров
        items:
          type: string
        type: array
      country:
        example: Россия
        type: string
      director:
        example: Тарантино
        type: string
      duration:
        description: Поля, которые есть только у фильмов
        example: 134
        type: integer
      genre:
        example: Боевик
        type: string
      id:
        example: 1
        type: integer
      originalTitle:
        example: Batman
        type: string
      poster:
        example: /static/poster.jpg
        type: string
      rating:
        example: 9.1
        type: number
      seasonsNumber:
        description: Поля, которые есть только у сериалов
        example: 1
        type: integer
      title:
        example: Бэтмен
        type: string
      type:
        example: movie
        type: string
      yearEnd:
        example: 2021
        type: integer
      yearStart:
        example: 2020
        type: integer
    type: object
  dto.PreviewContentCardVertical:
    properties:
      genre:
        example:
        - Боевик
        items:
          type: string
        type: array
      id:
        example: 1
        type: integer
      poster:
        example: /static/poster.jpg
        type: string
      rating:
        example: 9.1
        type: number
      releaseYear:
        description: Поля, которые есть только у фильмов
        example: 2020
        type: integer
      title:
        example: Бэтмен
        type: string
      type:
        example: movie
        type: string
      yearEnd:
        example: 2021
        type: integer
      yearStart:
        description: Поля, которые есть только у сериалов
        example: 2020
        type: integer
    type: object
  dto.PreviewOngoingContentCardVertical:
    properties:
      genre:
        example:
        - Боевик
        items:
          type: string
        type: array
      id:
        example: 1
        type: integer
      poster:
        example: /static/poster.jpg
        type: string
      releaseDate:
        example: "2022-01-02T15:04:05Z"
        type: string
      title:
        example: Бэтмен
        type: string
      type:
        example: movie
        type: string
    type: object
  dto.Register:
    properties:
      email:
        example: email@email.com
        format: string
        type: string
      password:
        example: SecretPassword1!
        format: string
        type: string
    type: object
  dto.ReviewCreateRequest:
    properties:
      contentID:
        example: 1
        format: int
        type: integer
      rating:
        example: 5
        format: int
        type: integer
      text:
        example: i like it
        format: string
        type: string
      title:
        example: Title
        format: string
        type: string
    type: object
  dto.ReviewResponse:
    properties:
      authorAvatar:
        example: avatars/avatar.jpg
        format: string
        type: string
      authorID:
        example: 1
        format: int
        type: integer
      authorName:
        example: Author
        format: string
        type: string
      contentID:
        example: 1
        format: int
        type: integer
      contentName:
        example: Content
        format: string
        type: string
      createdAt:
        example: "2022-01-02T15:04:05Z"
        format: int
        type: string
      dislikes:
        example: 5
        format: int
        type: integer
      id:
        example: 1
        format: int
        type: integer
      likes:
        example: 5
        format: int
        type: integer
      rating:
        example: 5
        format: int
        type: integer
      text:
        example: i like it
        format: string
        type: string
      title:
        example: Title
        format: string
        type: string
    type: object
  dto.ReviewResponseList:
    properties:
      count:
        example: 10
        format: int
        type: integer
      page:
        example: 1
        format: int
        type: integer
      pages:
        example: 1
        format: int
        type: integer
      reviews:
        items:
          $ref: '#/definitions/dto.ReviewResponse'
        type: array
      total:
        example: 1
        format: int
        type: integer
    type: object
  dto.ReviewUpdateRequest:
    properties:
      rating:
        example: 5
        format: int
        type: integer
      reviewID:
        example: 1
        format: int
        type: integer
      text:
        example: i like it
        format: string
        type: string
      title:
        example: Title
        format: string
        type: string
    type: object
  dto.SearchResult:
    properties:
      content:
        items:
          $ref: '#/definitions/dto.PreviewContentCard'
        type: array
      persons:
        items:
          $ref: '#/definitions/dto.PersonPreviewWithPhoto'
        type: array
    type: object
  dto.Season:
    properties:
      episodes:
        items:
          $ref: '#/definitions/dto.Episode'
        type: array
      id:
        example: 1
        type: integer
    type: object
  dto.SeriesContent:
    properties:
      seasons:
        items:
          $ref: '#/definitions/dto.Season'
        type: array
      yearEnd:
        example: 2020
        type: integer
      yearStart:
        example: 2020
        type: integer
    type: object
  dto.UpdatePassword:
    properties:
      newPassword:
        example: NewPassword1!
        format: string
        type: string
      oldPassword:
        example: OldPassword1!
        format: string
        type: string
    type: object
  dto.UserProfile:
    properties:
      avatar:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      rating:
        type: integer
    type: object
  dto.UserReviewResponseList:
    properties:
      count:
        example: 10
        format: int
        type: integer
      me:
        example: true
        format: bool
        type: boolean
      page:
        example: 1
        format: int
        type: integer
      pages:
        example: 1
        format: int
        type: integer
      reviews:
        items:
          $ref: '#/definitions/dto.ReviewResponse'
        type: array
      total:
        example: 1
        format: int
        type: integer
    type: object
  dto.UserUpdate:
    properties:
      email:
        type: string
      name:
        type: string
    type: object
  echo.HTTPError:
    properties:
      message: {}
    type: object
info:
  contact: {}
  description: сервис Киноскоп (аналог кинопоиска)
  title: API Киноскопа
  version: "1.0"
paths:
  /auth/isAuth:
    get:
      description: Проверяет, авторизован ли пользователь
      parameters:
      - default: session=xxx
        description: session
        in: header
        name: Cookie
        required: true
        type: string
      responses:
        "200":
          description: OK
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/echo.HTTPError'
      tags:
      - Auth
  /auth/logout:
    post:
      description: Удаляет сессию
      parameters:
      - default: session=xxx
        description: session
        in: header
        name: Cookie
        required: true
        type: string
      responses:
        "200":
          description: OK
      security:
      - _csrf: []
      tags:
      - Auth
  /auth/logoutAll:
    post:
      description: Удаляет все сессии пользователя
      parameters:
      - default: session=xxx
        description: session
        in: header
        name: Cookie
        required: true
        type: string
      responses:
        "200":
          description: OK
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - _csrf: []
      tags:
      - Auth
  /compilation/{id}/{page}:
    get:
      consumes:
      - application/json
      description: Получение карточек контента подборки по id
      parameters:
      - description: id подборки
        in: path
        name: id
        required: true
        type: integer
      - description: номер страницы
        in: path
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Compilation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Получение карточек контента подборки
      tags:
      - compilation
  /compilation/type/{compilationType}:
    get:
      consumes:
      - application/json
      description: Получение списка подборок по id типа подборки
      parameters:
      - description: id типа подборки
        in: path
        name: compilationType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CompilationResponseList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Получение списка подборок по типу подборок
      tags:
      - compilation
  /compilation/types:
    get:
      consumes:
      - application/json
      description: Получение списка подборок по id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CompilationTypeResponseList'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Получение списка подборок
      tags:
      - compilation
  /content/{id}:
    get:
      description: Получение контента по id
      parameters:
      - description: ID контента
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Content'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Получение контента по id
      tags:
      - content
  /content/person/{id}:
    get:
      description: Получение персоны по id
      parameters:
      - description: ID персоны
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Person'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Получение персоны по id
      tags:
      - content
  /favourite:
    put:
      consumes:
      - application/json
      description: Добавление в избранное. Если уже в избранном, то ошибка не возвращается
        (идемпотентный метод).
      parameters:
      - description: Данные для добавления в избранное
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.CreateFavouriteRequest'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - _csrf: []
      tags:
      - Favourite
  /favourite/{id}:
    delete:
      description: Удаление из избранного.
      parameters:
      - description: Идентификатор контента
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - _csrf: []
      tags:
      - Favourite
    get:
      description: Получение избранного пользователя
      parameters:
      - description: Идентификатор пользователя
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.FavouritesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      tags:
      - Favourite
  /favourite/my:
    get:
      description: Получение избранного пользователя
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.FavouritesResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      tags:
      - Favourite
  /favourite/status/{id}:
    get:
      description: Получение статуса контента в избранном
      parameters:
      - description: Идентификатор контента
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.FavouriteStatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      tags:
      - Favourite
  /ongoing/{id}:
    get:
      parameters:
      - description: ID контента календаря релизов
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PreviewOngoingContentCardVertical'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Получить контент календаря релизов по id контента
      tags:
      - ongoing_content
  /ongoing/{year}/{month}:
    get:
      parameters:
      - description: Месяц
        in: path
        name: month
        required: true
        type: integer
      - description: Год
        in: path
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.PreviewOngoingContentCardVertical'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Получить релизы по месяцу и году
      tags:
      - ongoing_content
  /ongoing/nearest:
    get:
      parameters:
      - description: Количество релизов
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.PreviewOngoingContentCardVertical'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Получить ближайшие релизы
      tags:
      - ongoing_content
  /ongoing/years:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Получить все года релизов
      tags:
      - ongoing_content
  /playground/ping:
    get:
      description: Проверка соединения через классический ping pong
      responses:
        "200":
          description: Pong
          schema:
            type: string
      tags:
      - Playground
  /review:
    post:
      consumes:
      - application/json
      description: Создать рецензию
      parameters:
      - description: Данные для создания рецензии
        in: body
        name: reviewCreate
        required: true
        schema:
          $ref: '#/definitions/dto.ReviewCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReviewResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - _csrf: []
      summary: Создать рецензию
      tags:
      - review
    put:
      consumes:
      - application/json
      description: Обновить рецензию
      parameters:
      - description: Данные для обновления рецензии
        in: body
        name: reviewUpdate
        required: true
        schema:
          $ref: '#/definitions/dto.ReviewUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReviewResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - _csrf: []
      summary: Обновить рецензию
      tags:
      - review
  /review/{id}:
    delete:
      consumes:
      - application/json
      description: Удалить рецензию
      parameters:
      - description: ID рецензии
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - _csrf: []
      summary: Удалить рецензию
      tags:
      - review
    get:
      consumes:
      - application/json
      description: Получить рецензию по id
      parameters:
      - description: ID рецензии
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReviewResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Получить рецензию
      tags:
      - review
  /review/{id}/vote:
    delete:
      consumes:
      - application/json
      description: Убрать лайк с рецензии
      parameters:
      - description: ID рецензии
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - _csrf: []
      summary: Убрать лайк с рецензии
      tags:
      - review
    put:
      consumes:
      - application/json
      description: Поставить оценку на рецензию
      parameters:
      - description: ID рецензии
        in: path
        name: id
        required: true
        type: integer
      - description: Лайк или дизлайк
        in: query
        name: vote
        required: true
        type: boolean
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - _csrf: []
      summary: Поставить оценку на рецензию
      tags:
      - review
  /review/content/{id}/{page}:
    get:
      description: Получить рецензии контента
      parameters:
      - description: ID контента
        in: path
        name: id
        required: true
        type: integer
      - description: Номер страницы
        in: path
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReviewResponseList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Получить рецензии контента
      tags:
      - review
  /review/myReview:
    get:
      description: Получить рецензию пользователя к контенту
      parameters:
      - description: ID контента
        in: query
        name: content_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReviewResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Получить рецензию пользователя к контенту
      tags:
      - review
  /review/recent:
    get:
      description: Получить последние рецензии
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReviewResponseList'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Получить последние рецензии
      tags:
      - review
  /review/user/{id}/{page}:
    get:
      description: Получить рецензии пользователя
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      - description: Номер страницы
        in: path
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserReviewResponseList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Получить рецензии пользователя
      tags:
      - review
  /review/user/{id}/recent:
    get:
      description: Получить последние рецензии пользователя
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReviewResponseList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Получить последние рецензии пользователя
      tags:
      - review
  /search:
    get:
      consumes:
      - application/json
      description: Поиск фильмов, сериалов и персон
      parameters:
      - description: Поисковый запрос
        in: query
        name: query
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SearchResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      tags:
      - Search
  /static/{id}:
    get:
      consumes:
      - application/json
      description: 'Получение ссылки на статический файл по id. Возвращает ссылку
        подобного вида:'
      parameters:
      - description: ID статики
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "400":
          description: невалидный id статики
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: файл не найден
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: ошибка сервера
          schema:
            $ref: '#/definitions/echo.HTTPError'
      tags:
      - Static
  /user/avatar:
    put:
      consumes:
      - application/json
      description: Позволяет загрузить аватарку пользователя. Необходимо быть авторизованным
      parameters:
      - default: session=xxx
        description: session
        in: header
        name: Cookie
        required: true
        type: string
      - description: файл с аватаркой
        in: formData
        name: avatar
        required: true
        type: file
      responses:
        "200":
          description: OK
        "400":
          description: Невалидное изображение
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - _csrf: []
      tags:
      - User
  /user/login:
    post:
      consumes:
      - application/json
      description: Авторизация пользователя. При успешной авторизации отправляет куки
        с сессией. Если пользователь уже
      parameters:
      - description: Данные для входа
        in: body
        name: loginData
        required: true
        schema:
          $ref: '#/definitions/dto.Login'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - _csrf: []
      tags:
      - User
  /user/me:
    get:
      consumes:
      - application/json
      description: Возвращает id авторизованного пользователя
      parameters:
      - default: session=xxx
        description: session
        in: header
        name: Cookie
        required: true
        type: string
      responses:
        "200":
          description: OK
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/echo.HTTPError'
      tags:
      - User
  /user/password:
    put:
      consumes:
      - application/json
      description: Обновляет пароль пользователя. Необходимо быть авторизованным,
        при этом все сессии пользователя
      parameters:
      - default: session=xxx
        description: session
        in: header
        name: Cookie
        required: true
        type: string
      - description: Данные для обновления пароля
        in: body
        name: loginData
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePassword'
      responses:
        "200":
          description: OK
        "400":
          description: Неверный пароль или невалидный payload
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - _csrf: []
      tags:
      - User
  /user/profile:
    get:
      consumes:
      - application/json
      description: Возвращает профиль пользователя по id
      parameters:
      - description: ID пользователя
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserProfile'
        "400":
          description: Неверный id
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/echo.HTTPError'
      tags:
      - User
    put:
      consumes:
      - application/json
      description: 'Позволяет обновить следующие данные пользователя: почта, имя (никнейм).
        Необходимо быть авторизованным.'
      parameters:
      - default: session=xxx
        description: session
        in: header
        name: Cookie
        required: true
        type: string
      - description: Данные для обновления профиля
        in: body
        name: updateData
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdate'
      responses:
        "200":
          description: OK
        "400":
          description: Невалидные данные для обновления профиля
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - _csrf: []
      tags:
      - User
  /user/register:
    post:
      consumes:
      - application/json
      description: Регистрация пользователя. Сразу же возвращает сессию в cookies
      parameters:
      - description: Данные для регистрации
        in: body
        name: registerData
        required: true
        schema:
          $ref: '#/definitions/dto.Register'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - _csrf: []
      tags:
      - User
securityDefinitions:
  _csrf:
    in: header
    name: x-csrf
    type: apiKey
swagger: "2.0"
