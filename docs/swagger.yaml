basePath: /api
definitions:
  dto.Compilation:
    properties:
      genre:
        example: action
        type: string
      ids:
        example:
        - 1
        - 2
        - 3
        items:
          type: integer
        type: array
    type: object
  dto.Genres:
    properties:
      genres:
        example:
        - action
        - drama
        - comedian
        items:
          type: string
        type: array
    type: object
  dto.Login:
    properties:
      login:
        example: email@email.com
        format: string
        type: string
      password:
        example: SecretPassword1!
        format: string
        type: string
    type: object
  dto.PreviewContentCard:
    properties:
      actors:
        example:
        - Том Хэнкс
        - Сергей Бодров
        items:
          type: string
        type: array
      country:
        example: Россия
        type: string
      director:
        example: Тарантино
        type: string
      duration:
        example: 134
        type: integer
      genre:
        example: Боевик
        type: string
      originalTitle:
        example: Batman
        type: string
      poster:
        example: /static/poster.jpg
        type: string
      rating:
        example: 9.1
        type: number
      releaseYear:
        example: 2020
        type: integer
      title:
        example: Бэтмен
        type: string
    type: object
  dto.Register:
    properties:
      email:
        example: email@email.com
        format: string
        type: string
      password:
        example: SecretPassword1!
        format: string
        type: string
    type: object
  echo.HTTPError:
    properties:
      message: {}
    type: object
info:
  contact: {}
  title: API Киноскопа
  version: "1.0"
paths:
  /auth/isAuth:
    get:
      description: Проверяет, авторизован ли пользователь
      parameters:
      - default: session=xxx
        description: session
        in: header
        name: Cookie
        required: true
        type: string
      responses:
        "200":
          description: OK
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/echo.HTTPError'
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Авторизация пользователя. При успешной авторизации отправляет куки
        с сессией. Если пользователь уже
      parameters:
      - description: Данные для входа
        in: body
        name: loginData
        required: true
        schema:
          $ref: '#/definitions/dto.Login'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      tags:
      - Auth
  /auth/logout:
    post:
      description: Удаляет сессию
      parameters:
      - default: session=xxx
        description: session
        in: header
        name: Cookie
        required: true
        type: string
      responses:
        "200":
          description: OK
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Регистрация пользователя. Сразу же возвращает сессию в cookies
      parameters:
      - description: Данные для регистрации
        in: body
        name: registerData
        required: true
        schema:
          $ref: '#/definitions/dto.Register'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      tags:
      - Auth
  /collections/compilation:
    get:
      description: Возвращает список всех доступных жанров фильмов и сериалов
      responses:
        "200":
          description: Список с id фильмов указанного жанра
          schema:
            $ref: '#/definitions/dto.Compilation'
        "404":
          description: Такого жанра не существует
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/echo.HTTPError'
      tags:
      - Collections
  /collections/genres:
    get:
      description: Возвращает список всех доступных жанров фильмов и сериалов
      responses:
        "200":
          description: Список с id фильмов указанного жанра
          schema:
            $ref: '#/definitions/dto.Genres'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/echo.HTTPError'
      tags:
      - Collections
  /content/contentPreview:
    get:
      description: Возвращает краткую информацию о фильме или сериале
      parameters:
      - description: ID искомого контента. Контентом может быть как фильм, так и сериал
        in: query
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Список с id фильмов указанного жанра
          schema:
            $ref: '#/definitions/dto.PreviewContentCard'
        "400":
          description: Требуется указать валидный id контента
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Контент с таким id не найден
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/echo.HTTPError'
      tags:
      - Content
  /playground/ping:
    get:
      description: Проверка соединения через классический ping pong
      responses:
        "200":
          description: Pong
          schema:
            type: string
      tags:
      - Playground
swagger: "2.0"
