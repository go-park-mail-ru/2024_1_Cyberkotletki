// Code generated by MockGen. DO NOT EDIT.
// Source: review.go
//
// Generated by this command:
//
//	mockgen -source=review.go -destination=mocks/mock_review.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	entity "github.com/go-park-mail-ru/2024_1_Cyberkotletki/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockReview is a mock of Review interface.
type MockReview struct {
	ctrl     *gomock.Controller
	recorder *MockReviewMockRecorder
}

// MockReviewMockRecorder is the mock recorder for MockReview.
type MockReviewMockRecorder struct {
	mock *MockReview
}

// NewMockReview creates a new mock instance.
func NewMockReview(ctrl *gomock.Controller) *MockReview {
	mock := &MockReview{ctrl: ctrl}
	mock.recorder = &MockReviewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReview) EXPECT() *MockReviewMockRecorder {
	return m.recorder
}

// AddReview mocks base method.
func (m *MockReview) AddReview(review *entity.Review) (*entity.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReview", review)
	ret0, _ := ret[0].(*entity.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReview indicates an expected call of AddReview.
func (mr *MockReviewMockRecorder) AddReview(review any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReview", reflect.TypeOf((*MockReview)(nil).AddReview), review)
}

// DeleteReviewByID mocks base method.
func (m *MockReview) DeleteReviewByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReviewByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReviewByID indicates an expected call of DeleteReviewByID.
func (mr *MockReviewMockRecorder) DeleteReviewByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReviewByID", reflect.TypeOf((*MockReview)(nil).DeleteReviewByID), id)
}

// GetContentReviewByAuthor mocks base method.
func (m *MockReview) GetContentReviewByAuthor(authorID, contentID int) (*entity.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentReviewByAuthor", authorID, contentID)
	ret0, _ := ret[0].(*entity.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentReviewByAuthor indicates an expected call of GetContentReviewByAuthor.
func (mr *MockReviewMockRecorder) GetContentReviewByAuthor(authorID, contentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentReviewByAuthor", reflect.TypeOf((*MockReview)(nil).GetContentReviewByAuthor), authorID, contentID)
}

// GetLatestReviews mocks base method.
func (m *MockReview) GetLatestReviews(limit int) ([]*entity.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestReviews", limit)
	ret0, _ := ret[0].([]*entity.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestReviews indicates an expected call of GetLatestReviews.
func (mr *MockReviewMockRecorder) GetLatestReviews(limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestReviews", reflect.TypeOf((*MockReview)(nil).GetLatestReviews), limit)
}

// GetReviewByID mocks base method.
func (m *MockReview) GetReviewByID(id int) (*entity.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewByID", id)
	ret0, _ := ret[0].(*entity.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewByID indicates an expected call of GetReviewByID.
func (mr *MockReviewMockRecorder) GetReviewByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewByID", reflect.TypeOf((*MockReview)(nil).GetReviewByID), id)
}

// GetReviewsByAuthorID mocks base method.
func (m *MockReview) GetReviewsByAuthorID(authorID, page, limit int) ([]*entity.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByAuthorID", authorID, page, limit)
	ret0, _ := ret[0].([]*entity.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsByAuthorID indicates an expected call of GetReviewsByAuthorID.
func (mr *MockReviewMockRecorder) GetReviewsByAuthorID(authorID, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByAuthorID", reflect.TypeOf((*MockReview)(nil).GetReviewsByAuthorID), authorID, page, limit)
}

// GetReviewsByContentID mocks base method.
func (m *MockReview) GetReviewsByContentID(contentID, page, limit int) ([]*entity.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByContentID", contentID, page, limit)
	ret0, _ := ret[0].([]*entity.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsByContentID indicates an expected call of GetReviewsByContentID.
func (mr *MockReviewMockRecorder) GetReviewsByContentID(contentID, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByContentID", reflect.TypeOf((*MockReview)(nil).GetReviewsByContentID), contentID, page, limit)
}

// GetReviewsCountByContentID mocks base method.
func (m *MockReview) GetReviewsCountByContentID(contentID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsCountByContentID", contentID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsCountByContentID indicates an expected call of GetReviewsCountByContentID.
func (mr *MockReviewMockRecorder) GetReviewsCountByContentID(contentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsCountByContentID", reflect.TypeOf((*MockReview)(nil).GetReviewsCountByContentID), contentID)
}

// IsVotedByUser mocks base method.
func (m *MockReview) IsVotedByUser(reviewID, userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsVotedByUser", reviewID, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsVotedByUser indicates an expected call of IsVotedByUser.
func (mr *MockReviewMockRecorder) IsVotedByUser(reviewID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsVotedByUser", reflect.TypeOf((*MockReview)(nil).IsVotedByUser), reviewID, userID)
}

// UnVoteReview mocks base method.
func (m *MockReview) UnVoteReview(reviewID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnVoteReview", reviewID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnVoteReview indicates an expected call of UnVoteReview.
func (mr *MockReviewMockRecorder) UnVoteReview(reviewID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnVoteReview", reflect.TypeOf((*MockReview)(nil).UnVoteReview), reviewID, userID)
}

// UpdateReview mocks base method.
func (m *MockReview) UpdateReview(review *entity.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReview", review)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReview indicates an expected call of UpdateReview.
func (mr *MockReviewMockRecorder) UpdateReview(review any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReview", reflect.TypeOf((*MockReview)(nil).UpdateReview), review)
}

// VoteReview mocks base method.
func (m *MockReview) VoteReview(reviewID, userID int, like bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VoteReview", reviewID, userID, like)
	ret0, _ := ret[0].(error)
	return ret0
}

// VoteReview indicates an expected call of VoteReview.
func (mr *MockReviewMockRecorder) VoteReview(reviewID, userID, like any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoteReview", reflect.TypeOf((*MockReview)(nil).VoteReview), reviewID, userID, like)
}
