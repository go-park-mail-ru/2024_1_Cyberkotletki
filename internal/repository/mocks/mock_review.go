// Code generated by MockGen. DO NOT EDIT.
// Source: review.go
//
// Generated by this command:
//
//	mockgen -source=review.go -destination=mocks/mock_review.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	entity "github.com/go-park-mail-ru/2024_1_Cyberkotletki/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockReview is a mock of Review interface.
type MockReview struct {
	ctrl     *gomock.Controller
	recorder *MockReviewMockRecorder
}

// MockReviewMockRecorder is the mock recorder for MockReview.
type MockReviewMockRecorder struct {
	mock *MockReview
}

// NewMockReview creates a new mock instance.
func NewMockReview(ctrl *gomock.Controller) *MockReview {
	mock := &MockReview{ctrl: ctrl}
	mock.recorder = &MockReviewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReview) EXPECT() *MockReviewMockRecorder {
	return m.recorder
}

// AddReview mocks base method.
func (m *MockReview) AddReview(review *entity.Review) (*entity.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReview", review)
	ret0, _ := ret[0].(*entity.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReview indicates an expected call of AddReview.
func (mr *MockReviewMockRecorder) AddReview(review any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReview", reflect.TypeOf((*MockReview)(nil).AddReview), review)
}

// DeleteReviewByID mocks base method.
func (m *MockReview) DeleteReviewByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReviewByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReviewByID indicates an expected call of DeleteReviewByID.
func (mr *MockReviewMockRecorder) DeleteReviewByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReviewByID", reflect.TypeOf((*MockReview)(nil).DeleteReviewByID), id)
}

// GetAuthorRating mocks base method.
func (m *MockReview) GetAuthorRating(authorID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorRating", authorID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorRating indicates an expected call of GetAuthorRating.
func (mr *MockReviewMockRecorder) GetAuthorRating(authorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorRating", reflect.TypeOf((*MockReview)(nil).GetAuthorRating), authorID)
}

// GetContentRating mocks base method.
func (m *MockReview) GetContentRating(reviewID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentRating", reviewID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentRating indicates an expected call of GetContentRating.
func (mr *MockReviewMockRecorder) GetContentRating(reviewID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentRating", reflect.TypeOf((*MockReview)(nil).GetContentRating), reviewID)
}

// GetContentReviewByAuthor mocks base method.
func (m *MockReview) GetContentReviewByAuthor(authorID, contentID int) (*entity.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentReviewByAuthor", authorID, contentID)
	ret0, _ := ret[0].(*entity.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentReviewByAuthor indicates an expected call of GetContentReviewByAuthor.
func (mr *MockReviewMockRecorder) GetContentReviewByAuthor(authorID, contentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentReviewByAuthor", reflect.TypeOf((*MockReview)(nil).GetContentReviewByAuthor), authorID, contentID)
}

// GetLatestReviews mocks base method.
func (m *MockReview) GetLatestReviews(limit int) ([]*entity.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestReviews", limit)
	ret0, _ := ret[0].([]*entity.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestReviews indicates an expected call of GetLatestReviews.
func (mr *MockReviewMockRecorder) GetLatestReviews(limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestReviews", reflect.TypeOf((*MockReview)(nil).GetLatestReviews), limit)
}

// GetReviewByID mocks base method.
func (m *MockReview) GetReviewByID(id int) (*entity.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewByID", id)
	ret0, _ := ret[0].(*entity.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewByID indicates an expected call of GetReviewByID.
func (mr *MockReviewMockRecorder) GetReviewByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewByID", reflect.TypeOf((*MockReview)(nil).GetReviewByID), id)
}

// GetReviewsByAuthorID mocks base method.
func (m *MockReview) GetReviewsByAuthorID(authorID, page, limit int) ([]*entity.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByAuthorID", authorID, page, limit)
	ret0, _ := ret[0].([]*entity.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsByAuthorID indicates an expected call of GetReviewsByAuthorID.
func (mr *MockReviewMockRecorder) GetReviewsByAuthorID(authorID, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByAuthorID", reflect.TypeOf((*MockReview)(nil).GetReviewsByAuthorID), authorID, page, limit)
}

// GetReviewsByContentID mocks base method.
func (m *MockReview) GetReviewsByContentID(contentID, page, limit int) ([]*entity.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByContentID", contentID, page, limit)
	ret0, _ := ret[0].([]*entity.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsByContentID indicates an expected call of GetReviewsByContentID.
func (mr *MockReviewMockRecorder) GetReviewsByContentID(contentID, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByContentID", reflect.TypeOf((*MockReview)(nil).GetReviewsByContentID), contentID, page, limit)
}

// IsLikedByUser mocks base method.
func (m *MockReview) IsLikedByUser(reviewID, userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLikedByUser", reviewID, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLikedByUser indicates an expected call of IsLikedByUser.
func (mr *MockReviewMockRecorder) IsLikedByUser(reviewID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLikedByUser", reflect.TypeOf((*MockReview)(nil).IsLikedByUser), reviewID, userID)
}

// LikeReview mocks base method.
func (m *MockReview) LikeReview(reviewID, userID int, like bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeReview", reviewID, userID, like)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikeReview indicates an expected call of LikeReview.
func (mr *MockReviewMockRecorder) LikeReview(reviewID, userID, like any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeReview", reflect.TypeOf((*MockReview)(nil).LikeReview), reviewID, userID, like)
}

// UnlikeReview mocks base method.
func (m *MockReview) UnlikeReview(reviewID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlikeReview", reviewID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlikeReview indicates an expected call of UnlikeReview.
func (mr *MockReviewMockRecorder) UnlikeReview(reviewID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikeReview", reflect.TypeOf((*MockReview)(nil).UnlikeReview), reviewID, userID)
}

// UpdateReview mocks base method.
func (m *MockReview) UpdateReview(review *entity.Review) (*entity.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReview", review)
	ret0, _ := ret[0].(*entity.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReview indicates an expected call of UpdateReview.
func (mr *MockReviewMockRecorder) UpdateReview(review any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReview", reflect.TypeOf((*MockReview)(nil).UpdateReview), review)
}
