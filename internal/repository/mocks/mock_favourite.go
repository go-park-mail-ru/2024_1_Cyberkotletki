// Code generated by MockGen. DO NOT EDIT.
// Source: favourite.go
//
// Generated by this command:
//
//	mockgen -source=favourite.go -destination=mocks/mock_favourite.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	entity "github.com/go-park-mail-ru/2024_1_Cyberkotletki/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockFavourite is a mock of Favourite interface.
type MockFavourite struct {
	ctrl     *gomock.Controller
	recorder *MockFavouriteMockRecorder
}

// MockFavouriteMockRecorder is the mock recorder for MockFavourite.
type MockFavouriteMockRecorder struct {
	mock *MockFavourite
}

// NewMockFavourite creates a new mock instance.
func NewMockFavourite(ctrl *gomock.Controller) *MockFavourite {
	mock := &MockFavourite{ctrl: ctrl}
	mock.recorder = &MockFavouriteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFavourite) EXPECT() *MockFavouriteMockRecorder {
	return m.recorder
}

// CreateFavourite mocks base method.
func (m *MockFavourite) CreateFavourite(userID, contentID int, category string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFavourite", userID, contentID, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFavourite indicates an expected call of CreateFavourite.
func (mr *MockFavouriteMockRecorder) CreateFavourite(userID, contentID, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFavourite", reflect.TypeOf((*MockFavourite)(nil).CreateFavourite), userID, contentID, category)
}

// DeleteFavourite mocks base method.
func (m *MockFavourite) DeleteFavourite(userID, contentID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFavourite", userID, contentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFavourite indicates an expected call of DeleteFavourite.
func (mr *MockFavouriteMockRecorder) DeleteFavourite(userID, contentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFavourite", reflect.TypeOf((*MockFavourite)(nil).DeleteFavourite), userID, contentID)
}

// GetFavourite mocks base method.
func (m *MockFavourite) GetFavourite(userID, contentID int) (*entity.Favourite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavourite", userID, contentID)
	ret0, _ := ret[0].(*entity.Favourite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavourite indicates an expected call of GetFavourite.
func (mr *MockFavouriteMockRecorder) GetFavourite(userID, contentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavourite", reflect.TypeOf((*MockFavourite)(nil).GetFavourite), userID, contentID)
}

// GetFavourites mocks base method.
func (m *MockFavourite) GetFavourites(userID int) ([]*entity.Favourite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavourites", userID)
	ret0, _ := ret[0].([]*entity.Favourite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavourites indicates an expected call of GetFavourites.
func (mr *MockFavouriteMockRecorder) GetFavourites(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavourites", reflect.TypeOf((*MockFavourite)(nil).GetFavourites), userID)
}
