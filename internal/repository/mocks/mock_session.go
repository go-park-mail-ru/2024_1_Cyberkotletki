// Code generated by MockGen. DO NOT EDIT.
// Source: session.go
//
// Generated by this command:
//
//	mockgen -source=session.go -destination=mocks/mock_session.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// CheckSession mocks base method.
func (m *MockSession) CheckSession(session string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSession", session)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckSession indicates an expected call of CheckSession.
func (mr *MockSessionMockRecorder) CheckSession(session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSession", reflect.TypeOf((*MockSession)(nil).CheckSession), session)
}

// DeleteSession mocks base method.
func (m *MockSession) DeleteSession(session string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", session)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockSessionMockRecorder) DeleteSession(session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSession)(nil).DeleteSession), session)
}

// NewSession mocks base method.
func (m *MockSession) NewSession(id int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSession", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// NewSession indicates an expected call of NewSession.
func (mr *MockSessionMockRecorder) NewSession(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSession", reflect.TypeOf((*MockSession)(nil).NewSession), id)
}
