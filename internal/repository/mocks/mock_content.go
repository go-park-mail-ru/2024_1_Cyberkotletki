// Code generated by MockGen. DO NOT EDIT.
// Source: content.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	entity "github.com/go-park-mail-ru/2024_1_Cyberkotletki/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockContent is a mock of Content interface.
type MockContent struct {
	ctrl     *gomock.Controller
	recorder *MockContentMockRecorder
}

// MockContentMockRecorder is the mock recorder for MockContent.
type MockContentMockRecorder struct {
	mock *MockContent
}

// NewMockContent creates a new mock instance.
func NewMockContent(ctrl *gomock.Controller) *MockContent {
	mock := &MockContent{ctrl: ctrl}
	mock.recorder = &MockContentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContent) EXPECT() *MockContentMockRecorder {
	return m.recorder
}

// GetContent mocks base method.
func (m *MockContent) GetContent(id int) (*entity.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContent", id)
	ret0, _ := ret[0].(*entity.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContent indicates an expected call of GetContent.
func (mr *MockContentMockRecorder) GetContent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContent", reflect.TypeOf((*MockContent)(nil).GetContent), id)
}

// GetPerson mocks base method.
func (m *MockContent) GetPerson(id int) (*entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPerson", id)
	ret0, _ := ret[0].(*entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPerson indicates an expected call of GetPerson.
func (mr *MockContentMockRecorder) GetPerson(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerson", reflect.TypeOf((*MockContent)(nil).GetPerson), id)
}

// GetPersonRoles mocks base method.
func (m *MockContent) GetPersonRoles(personID int) ([]entity.PersonRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonRoles", personID)
	ret0, _ := ret[0].([]entity.PersonRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonRoles indicates an expected call of GetPersonRoles.
func (mr *MockContentMockRecorder) GetPersonRoles(personID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonRoles", reflect.TypeOf((*MockContent)(nil).GetPersonRoles), personID)
}

// GetPreviewContent mocks base method.
func (m *MockContent) GetPreviewContent(id int) (*entity.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreviewContent", id)
	ret0, _ := ret[0].(*entity.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreviewContent indicates an expected call of GetPreviewContent.
func (mr *MockContentMockRecorder) GetPreviewContent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreviewContent", reflect.TypeOf((*MockContent)(nil).GetPreviewContent), id)
}
