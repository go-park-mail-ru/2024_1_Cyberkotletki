// Code generated by MockGen. DO NOT EDIT.
// Source: content.go
//
// Generated by this command:
//
//	mockgen -source=content.go -destination=mocks/mock_content.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	entity "github.com/go-park-mail-ru/2024_1_Cyberkotletki/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockFilm is a mock of Film interface.
type MockFilm struct {
	ctrl     *gomock.Controller
	recorder *MockFilmMockRecorder
}

// MockFilmMockRecorder is the mock recorder for MockFilm.
type MockFilmMockRecorder struct {
	mock *MockFilm
}

// NewMockFilm creates a new mock instance.
func NewMockFilm(ctrl *gomock.Controller) *MockFilm {
	mock := &MockFilm{ctrl: ctrl}
	mock.recorder = &MockFilmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilm) EXPECT() *MockFilmMockRecorder {
	return m.recorder
}

// GetFilm mocks base method.
func (m *MockFilm) GetFilm(id int) (*entity.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilm", id)
	ret0, _ := ret[0].(*entity.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilm indicates an expected call of GetFilm.
func (mr *MockFilmMockRecorder) GetFilm(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilm", reflect.TypeOf((*MockFilm)(nil).GetFilm), id)
}

// GetFilmsByGenre mocks base method.
func (m *MockFilm) GetFilmsByGenre(genreID int) ([]entity.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmsByGenre", genreID)
	ret0, _ := ret[0].([]entity.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmsByGenre indicates an expected call of GetFilmsByGenre.
func (mr *MockFilmMockRecorder) GetFilmsByGenre(genreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsByGenre", reflect.TypeOf((*MockFilm)(nil).GetFilmsByGenre), genreID)
}

// MockContent is a mock of Content interface.
type MockContent struct {
	ctrl     *gomock.Controller
	recorder *MockContentMockRecorder
}

// MockContentMockRecorder is the mock recorder for MockContent.
type MockContentMockRecorder struct {
	mock *MockContent
}

// NewMockContent creates a new mock instance.
func NewMockContent(ctrl *gomock.Controller) *MockContent {
	mock := &MockContent{ctrl: ctrl}
	mock.recorder = &MockContentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContent) EXPECT() *MockContentMockRecorder {
	return m.recorder
}

// GetFilm mocks base method.
func (m *MockContent) GetFilm(id int) (*entity.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilm", id)
	ret0, _ := ret[0].(*entity.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilm indicates an expected call of GetFilm.
func (mr *MockContentMockRecorder) GetFilm(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilm", reflect.TypeOf((*MockContent)(nil).GetFilm), id)
}

// GetFilmsByGenre mocks base method.
func (m *MockContent) GetFilmsByGenre(genreID int) ([]entity.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmsByGenre", genreID)
	ret0, _ := ret[0].([]entity.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmsByGenre indicates an expected call of GetFilmsByGenre.
func (mr *MockContentMockRecorder) GetFilmsByGenre(genreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsByGenre", reflect.TypeOf((*MockContent)(nil).GetFilmsByGenre), genreID)
}
