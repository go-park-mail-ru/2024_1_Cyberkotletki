// Code generated by MockGen. DO NOT EDIT.
// Source: compilation_type.go
//
// Generated by this command:
//
//	mockgen -source=compilation_type.go -destination=mocks/mock_compilation_type.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	entity "github.com/go-park-mail-ru/2024_1_Cyberkotletki/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockCompilationType is a mock of CompilationType interface.
type MockCompilationType struct {
	ctrl     *gomock.Controller
	recorder *MockCompilationTypeMockRecorder
}

// MockCompilationTypeMockRecorder is the mock recorder for MockCompilationType.
type MockCompilationTypeMockRecorder struct {
	mock *MockCompilationType
}

// NewMockCompilationType creates a new mock instance.
func NewMockCompilationType(ctrl *gomock.Controller) *MockCompilationType {
	mock := &MockCompilationType{ctrl: ctrl}
	mock.recorder = &MockCompilationTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompilationType) EXPECT() *MockCompilationTypeMockRecorder {
	return m.recorder
}

// GetAllCompilationTypes mocks base method.
func (m *MockCompilationType) GetAllCompilationTypes() ([]*entity.CompilationType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCompilationTypes")
	ret0, _ := ret[0].([]*entity.CompilationType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCompilationTypes indicates an expected call of GetAllCompilationTypes.
func (mr *MockCompilationTypeMockRecorder) GetAllCompilationTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCompilationTypes", reflect.TypeOf((*MockCompilationType)(nil).GetAllCompilationTypes))
}

// GetCompilationType mocks base method.
func (m *MockCompilationType) GetCompilationType(id int) (*entity.CompilationType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompilationType", id)
	ret0, _ := ret[0].(*entity.CompilationType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompilationType indicates an expected call of GetCompilationType.
func (mr *MockCompilationTypeMockRecorder) GetCompilationType(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompilationType", reflect.TypeOf((*MockCompilationType)(nil).GetCompilationType), id)
}
