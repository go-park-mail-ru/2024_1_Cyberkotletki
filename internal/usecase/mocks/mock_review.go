// Code generated by MockGen. DO NOT EDIT.
// Source: review.go
//
// Generated by this command:
//
//	mockgen -source=review.go -destination=mocks/mock_review.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	dto "github.com/go-park-mail-ru/2024_1_Cyberkotletki/internal/entity/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockReview is a mock of Review interface.
type MockReview struct {
	ctrl     *gomock.Controller
	recorder *MockReviewMockRecorder
}

// MockReviewMockRecorder is the mock recorder for MockReview.
type MockReviewMockRecorder struct {
	mock *MockReview
}

// NewMockReview creates a new mock instance.
func NewMockReview(ctrl *gomock.Controller) *MockReview {
	mock := &MockReview{ctrl: ctrl}
	mock.recorder = &MockReviewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReview) EXPECT() *MockReviewMockRecorder {
	return m.recorder
}

// CreateReview mocks base method.
func (m *MockReview) CreateReview(create dto.ReviewCreate) (*dto.ReviewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", create)
	ret0, _ := ret[0].(*dto.ReviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockReviewMockRecorder) CreateReview(create any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockReview)(nil).CreateReview), create)
}

// DeleteReview mocks base method.
func (m *MockReview) DeleteReview(reviewID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReview", reviewID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReview indicates an expected call of DeleteReview.
func (mr *MockReviewMockRecorder) DeleteReview(reviewID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReview", reflect.TypeOf((*MockReview)(nil).DeleteReview), reviewID, userID)
}

// DislikeReview mocks base method.
func (m *MockReview) DislikeReview(userID, reviewID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DislikeReview", userID, reviewID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DislikeReview indicates an expected call of DislikeReview.
func (mr *MockReviewMockRecorder) DislikeReview(userID, reviewID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DislikeReview", reflect.TypeOf((*MockReview)(nil).DislikeReview), userID, reviewID)
}

// EditReview mocks base method.
func (m *MockReview) EditReview(update dto.ReviewUpdate) (*dto.ReviewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditReview", update)
	ret0, _ := ret[0].(*dto.ReviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditReview indicates an expected call of EditReview.
func (mr *MockReviewMockRecorder) EditReview(update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditReview", reflect.TypeOf((*MockReview)(nil).EditReview), update)
}

// GetContentReviewByAuthor mocks base method.
func (m *MockReview) GetContentReviewByAuthor(authorID, contentID int) (*dto.ReviewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentReviewByAuthor", authorID, contentID)
	ret0, _ := ret[0].(*dto.ReviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentReviewByAuthor indicates an expected call of GetContentReviewByAuthor.
func (mr *MockReviewMockRecorder) GetContentReviewByAuthor(authorID, contentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentReviewByAuthor", reflect.TypeOf((*MockReview)(nil).GetContentReviewByAuthor), authorID, contentID)
}

// GetContentReviews mocks base method.
func (m *MockReview) GetContentReviews(contentID, count, page int) (*dto.ReviewResponseList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentReviews", contentID, count, page)
	ret0, _ := ret[0].(*dto.ReviewResponseList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentReviews indicates an expected call of GetContentReviews.
func (mr *MockReviewMockRecorder) GetContentReviews(contentID, count, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentReviews", reflect.TypeOf((*MockReview)(nil).GetContentReviews), contentID, count, page)
}

// GetLatestReviews mocks base method.
func (m *MockReview) GetLatestReviews(count int) (*dto.ReviewResponseList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestReviews", count)
	ret0, _ := ret[0].(*dto.ReviewResponseList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestReviews indicates an expected call of GetLatestReviews.
func (mr *MockReviewMockRecorder) GetLatestReviews(count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestReviews", reflect.TypeOf((*MockReview)(nil).GetLatestReviews), count)
}

// GetReview mocks base method.
func (m *MockReview) GetReview(reviewID int) (*dto.ReviewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReview", reviewID)
	ret0, _ := ret[0].(*dto.ReviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReview indicates an expected call of GetReview.
func (mr *MockReviewMockRecorder) GetReview(reviewID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReview", reflect.TypeOf((*MockReview)(nil).GetReview), reviewID)
}

// GetUserReviews mocks base method.
func (m *MockReview) GetUserReviews(userID, count, page int) (*dto.ReviewResponseList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReviews", userID, count, page)
	ret0, _ := ret[0].(*dto.ReviewResponseList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserReviews indicates an expected call of GetUserReviews.
func (mr *MockReviewMockRecorder) GetUserReviews(userID, count, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReviews", reflect.TypeOf((*MockReview)(nil).GetUserReviews), userID, count, page)
}

// IsLikedByUser mocks base method.
func (m *MockReview) IsLikedByUser(userID, reviewID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLikedByUser", userID, reviewID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLikedByUser indicates an expected call of IsLikedByUser.
func (mr *MockReviewMockRecorder) IsLikedByUser(userID, reviewID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLikedByUser", reflect.TypeOf((*MockReview)(nil).IsLikedByUser), userID, reviewID)
}

// LikeReview mocks base method.
func (m *MockReview) LikeReview(userID, reviewID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeReview", userID, reviewID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikeReview indicates an expected call of LikeReview.
func (mr *MockReviewMockRecorder) LikeReview(userID, reviewID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeReview", reflect.TypeOf((*MockReview)(nil).LikeReview), userID, reviewID)
}

// UnlikeReview mocks base method.
func (m *MockReview) UnlikeReview(userID, reviewID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlikeReview", userID, reviewID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlikeReview indicates an expected call of UnlikeReview.
func (mr *MockReviewMockRecorder) UnlikeReview(userID, reviewID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikeReview", reflect.TypeOf((*MockReview)(nil).UnlikeReview), userID, reviewID)
}
