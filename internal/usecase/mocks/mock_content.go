// Code generated by MockGen. DO NOT EDIT.
// Source: content.go
//
// Generated by this command:
//
//	mockgen -source=content.go -destination=mocks/mock_content.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	dto "github.com/go-park-mail-ru/2024_1_Cyberkotletki/internal/entity/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockContent is a mock of Content interface.
type MockContent struct {
	ctrl     *gomock.Controller
	recorder *MockContentMockRecorder
}

// MockContentMockRecorder is the mock recorder for MockContent.
type MockContentMockRecorder struct {
	mock *MockContent
}

// NewMockContent creates a new mock instance.
func NewMockContent(ctrl *gomock.Controller) *MockContent {
	mock := &MockContent{ctrl: ctrl}
	mock.recorder = &MockContentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContent) EXPECT() *MockContentMockRecorder {
	return m.recorder
}

// GetAllOngoingsYears mocks base method.
func (m *MockContent) GetAllOngoingsYears() (*dto.ReleaseYearsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOngoingsYears")
	ret0, _ := ret[0].(*dto.ReleaseYearsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOngoingsYears indicates an expected call of GetAllOngoingsYears.
func (mr *MockContentMockRecorder) GetAllOngoingsYears() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOngoingsYears", reflect.TypeOf((*MockContent)(nil).GetAllOngoingsYears))
}

// GetContentByID mocks base method.
func (m *MockContent) GetContentByID(id int) (*dto.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentByID", id)
	ret0, _ := ret[0].(*dto.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentByID indicates an expected call of GetContentByID.
func (mr *MockContentMockRecorder) GetContentByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentByID", reflect.TypeOf((*MockContent)(nil).GetContentByID), id)
}

// GetNearestOngoings mocks base method.
func (m *MockContent) GetNearestOngoings() (*dto.PreviewOngoingContentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNearestOngoings")
	ret0, _ := ret[0].(*dto.PreviewOngoingContentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNearestOngoings indicates an expected call of GetNearestOngoings.
func (mr *MockContentMockRecorder) GetNearestOngoings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearestOngoings", reflect.TypeOf((*MockContent)(nil).GetNearestOngoings))
}

// GetOngoingContentByMonthAndYear mocks base method.
func (m *MockContent) GetOngoingContentByMonthAndYear(month, year int) (*dto.PreviewOngoingContentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOngoingContentByMonthAndYear", month, year)
	ret0, _ := ret[0].(*dto.PreviewOngoingContentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOngoingContentByMonthAndYear indicates an expected call of GetOngoingContentByMonthAndYear.
func (mr *MockContentMockRecorder) GetOngoingContentByMonthAndYear(month, year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOngoingContentByMonthAndYear", reflect.TypeOf((*MockContent)(nil).GetOngoingContentByMonthAndYear), month, year)
}

// GetPersonByID mocks base method.
func (m *MockContent) GetPersonByID(id int) (*dto.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonByID", id)
	ret0, _ := ret[0].(*dto.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonByID indicates an expected call of GetPersonByID.
func (mr *MockContentMockRecorder) GetPersonByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonByID", reflect.TypeOf((*MockContent)(nil).GetPersonByID), id)
}

// GetPreviewContentByID mocks base method.
func (m *MockContent) GetPreviewContentByID(id int) (*dto.PreviewContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreviewContentByID", id)
	ret0, _ := ret[0].(*dto.PreviewContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreviewContentByID indicates an expected call of GetPreviewContentByID.
func (mr *MockContentMockRecorder) GetPreviewContentByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreviewContentByID", reflect.TypeOf((*MockContent)(nil).GetPreviewContentByID), id)
}

// GetPreviewPersonByID mocks base method.
func (m *MockContent) GetPreviewPersonByID(id int) (*dto.PersonPreviewWithPhoto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreviewPersonByID", id)
	ret0, _ := ret[0].(*dto.PersonPreviewWithPhoto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreviewPersonByID indicates an expected call of GetPreviewPersonByID.
func (mr *MockContentMockRecorder) GetPreviewPersonByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreviewPersonByID", reflect.TypeOf((*MockContent)(nil).GetPreviewPersonByID), id)
}

// IsOngoingContentReleased mocks base method.
func (m *MockContent) IsOngoingContentReleased(contentID int, releasedCh chan<- bool, errCh chan<- error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IsOngoingContentReleased", contentID, releasedCh, errCh)
}

// IsOngoingContentReleased indicates an expected call of IsOngoingContentReleased.
func (mr *MockContentMockRecorder) IsOngoingContentReleased(contentID, releasedCh, errCh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOngoingContentReleased", reflect.TypeOf((*MockContent)(nil).IsOngoingContentReleased), contentID, releasedCh, errCh)
}

// SetReleasedState mocks base method.
func (m *MockContent) SetReleasedState(secretKey string, contentID int, isReleased bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReleasedState", secretKey, contentID, isReleased)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReleasedState indicates an expected call of SetReleasedState.
func (mr *MockContentMockRecorder) SetReleasedState(secretKey, contentID, isReleased any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReleasedState", reflect.TypeOf((*MockContent)(nil).SetReleasedState), secretKey, contentID, isReleased)
}
