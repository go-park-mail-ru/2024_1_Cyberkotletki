// Code generated by MockGen. DO NOT EDIT.
// Source: ongoing_content.go
//
// Generated by this command:
//
//	mockgen -source=ongoing_content.go -destination=mocks/mock_ongoing_content.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	dto "github.com/go-park-mail-ru/2024_1_Cyberkotletki/internal/entity/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockOngoingContent is a mock of OngoingContent interface.
type MockOngoingContent struct {
	ctrl     *gomock.Controller
	recorder *MockOngoingContentMockRecorder
}

// MockOngoingContentMockRecorder is the mock recorder for MockOngoingContent.
type MockOngoingContentMockRecorder struct {
	mock *MockOngoingContent
}

// NewMockOngoingContent creates a new mock instance.
func NewMockOngoingContent(ctrl *gomock.Controller) *MockOngoingContent {
	mock := &MockOngoingContent{ctrl: ctrl}
	mock.recorder = &MockOngoingContentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOngoingContent) EXPECT() *MockOngoingContentMockRecorder {
	return m.recorder
}

// GetAllReleaseYears mocks base method.
func (m *MockOngoingContent) GetAllReleaseYears() (*dto.ReleaseYearsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllReleaseYears")
	ret0, _ := ret[0].(*dto.ReleaseYearsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllReleaseYears indicates an expected call of GetAllReleaseYears.
func (mr *MockOngoingContentMockRecorder) GetAllReleaseYears() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllReleaseYears", reflect.TypeOf((*MockOngoingContent)(nil).GetAllReleaseYears))
}

// GetNearestOngoings mocks base method.
func (m *MockOngoingContent) GetNearestOngoings(limit int) (*dto.PreviewOngoingContentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNearestOngoings", limit)
	ret0, _ := ret[0].(*dto.PreviewOngoingContentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNearestOngoings indicates an expected call of GetNearestOngoings.
func (mr *MockOngoingContentMockRecorder) GetNearestOngoings(limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearestOngoings", reflect.TypeOf((*MockOngoingContent)(nil).GetNearestOngoings), limit)
}

// GetOngoingContentByContentID mocks base method.
func (m *MockOngoingContent) GetOngoingContentByContentID(contentID int) (*dto.PreviewOngoingContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOngoingContentByContentID", contentID)
	ret0, _ := ret[0].(*dto.PreviewOngoingContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOngoingContentByContentID indicates an expected call of GetOngoingContentByContentID.
func (mr *MockOngoingContentMockRecorder) GetOngoingContentByContentID(contentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOngoingContentByContentID", reflect.TypeOf((*MockOngoingContent)(nil).GetOngoingContentByContentID), contentID)
}

// GetOngoingContentByMonthAndYear mocks base method.
func (m *MockOngoingContent) GetOngoingContentByMonthAndYear(month, year int) (*dto.PreviewOngoingContentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOngoingContentByMonthAndYear", month, year)
	ret0, _ := ret[0].(*dto.PreviewOngoingContentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOngoingContentByMonthAndYear indicates an expected call of GetOngoingContentByMonthAndYear.
func (mr *MockOngoingContentMockRecorder) GetOngoingContentByMonthAndYear(month, year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOngoingContentByMonthAndYear", reflect.TypeOf((*MockOngoingContent)(nil).GetOngoingContentByMonthAndYear), month, year)
}

// IsOngoingContentFinished mocks base method.
func (m *MockOngoingContent) IsOngoingContentFinished(contentID int) (*dto.IsOngoingContentFinishedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOngoingContentFinished", contentID)
	ret0, _ := ret[0].(*dto.IsOngoingContentFinishedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOngoingContentFinished indicates an expected call of IsOngoingContentFinished.
func (mr *MockOngoingContentMockRecorder) IsOngoingContentFinished(contentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOngoingContentFinished", reflect.TypeOf((*MockOngoingContent)(nil).IsOngoingContentFinished), contentID)
}
