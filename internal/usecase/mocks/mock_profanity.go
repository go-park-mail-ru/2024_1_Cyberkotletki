// Code generated by MockGen. DO NOT EDIT.
// Source: profanity.go
//
// Generated by this command:
//
//	mockgen -source=profanity.go -destination=mocks/mock_profanity.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProfanity is a mock of Profanity interface.
type MockProfanity struct {
	ctrl     *gomock.Controller
	recorder *MockProfanityMockRecorder
}

// MockProfanityMockRecorder is the mock recorder for MockProfanity.
type MockProfanityMockRecorder struct {
	mock *MockProfanity
}

// NewMockProfanity creates a new mock instance.
func NewMockProfanity(ctrl *gomock.Controller) *MockProfanity {
	mock := &MockProfanity{ctrl: ctrl}
	mock.recorder = &MockProfanityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfanity) EXPECT() *MockProfanityMockRecorder {
	return m.recorder
}

// FilterMessage mocks base method.
func (m *MockProfanity) FilterMessage(text string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterMessage", text)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterMessage indicates an expected call of FilterMessage.
func (mr *MockProfanityMockRecorder) FilterMessage(text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterMessage", reflect.TypeOf((*MockProfanity)(nil).FilterMessage), text)
}
