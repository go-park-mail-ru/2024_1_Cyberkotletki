// Code generated by MockGen. DO NOT EDIT.
// Source: static.go
//
// Generated by this command:
//
//	mockgen -source=static.go -destination=mocks/mock_static.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStatic is a mock of Static interface.
type MockStatic struct {
	ctrl     *gomock.Controller
	recorder *MockStaticMockRecorder
}

// MockStaticMockRecorder is the mock recorder for MockStatic.
type MockStaticMockRecorder struct {
	mock *MockStatic
}

// NewMockStatic creates a new mock instance.
func NewMockStatic(ctrl *gomock.Controller) *MockStatic {
	mock := &MockStatic{ctrl: ctrl}
	mock.recorder = &MockStaticMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatic) EXPECT() *MockStaticMockRecorder {
	return m.recorder
}

// GetAvatar mocks base method.
func (m *MockStatic) GetAvatar(staticID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatar", staticID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatar indicates an expected call of GetAvatar.
func (mr *MockStaticMockRecorder) GetAvatar(staticID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatar", reflect.TypeOf((*MockStatic)(nil).GetAvatar), staticID)
}

// GetStaticURL mocks base method.
func (m *MockStatic) GetStaticURL(id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaticURL", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaticURL indicates an expected call of GetStaticURL.
func (mr *MockStaticMockRecorder) GetStaticURL(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaticURL", reflect.TypeOf((*MockStatic)(nil).GetStaticURL), id)
}

// UploadAvatar mocks base method.
func (m *MockStatic) UploadAvatar(data []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAvatar", data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadAvatar indicates an expected call of UploadAvatar.
func (mr *MockStaticMockRecorder) UploadAvatar(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatar", reflect.TypeOf((*MockStatic)(nil).UploadAvatar), data)
}
