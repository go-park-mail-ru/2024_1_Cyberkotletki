// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(in *jlexer.Lexer, out *SeriesContent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "yearStart":
			out.YearStart = int(in.Int())
		case "yearEnd":
			out.YearEnd = int(in.Int())
		case "seasons":
			if in.IsNull() {
				in.Skip()
				out.Seasons = nil
			} else {
				in.Delim('[')
				if out.Seasons == nil {
					if !in.IsDelim(']') {
						out.Seasons = make([]Season, 0, 2)
					} else {
						out.Seasons = []Season{}
					}
				} else {
					out.Seasons = (out.Seasons)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Season
					(v1).UnmarshalEasyJSON(in)
					out.Seasons = append(out.Seasons, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(out *jwriter.Writer, in SeriesContent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"yearStart\":"
		out.RawString(prefix[1:])
		out.Int(int(in.YearStart))
	}
	{
		const prefix string = ",\"yearEnd\":"
		out.RawString(prefix)
		out.Int(int(in.YearEnd))
	}
	{
		const prefix string = ",\"seasons\":"
		out.RawString(prefix)
		if in.Seasons == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Seasons {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SeriesContent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SeriesContent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SeriesContent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SeriesContent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(l, v)
}
func easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(in *jlexer.Lexer, out *Season) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "episodes":
			if in.IsNull() {
				in.Skip()
				out.Episodes = nil
			} else {
				in.Delim('[')
				if out.Episodes == nil {
					if !in.IsDelim(']') {
						out.Episodes = make([]Episode, 0, 1)
					} else {
						out.Episodes = []Episode{}
					}
				} else {
					out.Episodes = (out.Episodes)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Episode
					(v4).UnmarshalEasyJSON(in)
					out.Episodes = append(out.Episodes, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(out *jwriter.Writer, in Season) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"episodes\":"
		out.RawString(prefix)
		if in.Episodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Episodes {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Season) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Season) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Season) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Season) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(l, v)
}
func easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto2(in *jlexer.Lexer, out *PreviewContentCardVertical) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "genre":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]string, 0, 4)
					} else {
						out.Genres = []string{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Genres = append(out.Genres, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "poster":
			out.Poster = string(in.String())
		case "rating":
			out.Rating = float64(in.Float64())
		case "type":
			out.Type = string(in.String())
		case "releaseYear":
			out.ReleaseYear = int(in.Int())
		case "yearStart":
			out.YearStart = int(in.Int())
		case "yearEnd":
			out.YearEnd = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto2(out *jwriter.Writer, in PreviewContentCardVertical) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"genre\":"
		out.RawString(prefix)
		if in.Genres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Genres {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"poster\":"
		out.RawString(prefix)
		out.String(string(in.Poster))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rating))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	if in.ReleaseYear != 0 {
		const prefix string = ",\"releaseYear\":"
		out.RawString(prefix)
		out.Int(int(in.ReleaseYear))
	}
	if in.YearStart != 0 {
		const prefix string = ",\"yearStart\":"
		out.RawString(prefix)
		out.Int(int(in.YearStart))
	}
	if in.YearEnd != 0 {
		const prefix string = ",\"yearEnd\":"
		out.RawString(prefix)
		out.Int(int(in.YearEnd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PreviewContentCardVertical) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PreviewContentCardVertical) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PreviewContentCardVertical) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PreviewContentCardVertical) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto2(l, v)
}
func easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto3(in *jlexer.Lexer, out *PreviewContent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "originalTitle":
			out.OriginalTitle = string(in.String())
		case "country":
			out.Country = string(in.String())
		case "genre":
			out.Genre = string(in.String())
		case "director":
			out.Director = string(in.String())
		case "actors":
			if in.IsNull() {
				in.Skip()
				out.Actors = nil
			} else {
				in.Delim('[')
				if out.Actors == nil {
					if !in.IsDelim(']') {
						out.Actors = make([]string, 0, 4)
					} else {
						out.Actors = []string{}
					}
				} else {
					out.Actors = (out.Actors)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Actors = append(out.Actors, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "poster":
			out.Poster = string(in.String())
		case "rating":
			out.Rating = float64(in.Float64())
		case "type":
			out.Type = string(in.String())
		case "duration":
			out.Duration = int(in.Int())
		case "release":
			out.ReleaseYear = int(in.Int())
		case "seasonsNumber":
			out.SeasonsNumber = int(in.Int())
		case "yearStart":
			out.YearStart = int(in.Int())
		case "yearEnd":
			out.YearEnd = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto3(out *jwriter.Writer, in PreviewContent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	if in.OriginalTitle != "" {
		const prefix string = ",\"originalTitle\":"
		out.RawString(prefix)
		out.String(string(in.OriginalTitle))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"genre\":"
		out.RawString(prefix)
		out.String(string(in.Genre))
	}
	{
		const prefix string = ",\"director\":"
		out.RawString(prefix)
		out.String(string(in.Director))
	}
	{
		const prefix string = ",\"actors\":"
		out.RawString(prefix)
		if in.Actors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Actors {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"poster\":"
		out.RawString(prefix)
		out.String(string(in.Poster))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rating))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int(int(in.Duration))
	}
	if in.ReleaseYear != 0 {
		const prefix string = ",\"release\":"
		out.RawString(prefix)
		out.Int(int(in.ReleaseYear))
	}
	if in.SeasonsNumber != 0 {
		const prefix string = ",\"seasonsNumber\":"
		out.RawString(prefix)
		out.Int(int(in.SeasonsNumber))
	}
	if in.YearStart != 0 {
		const prefix string = ",\"yearStart\":"
		out.RawString(prefix)
		out.Int(int(in.YearStart))
	}
	if in.YearEnd != 0 {
		const prefix string = ",\"yearEnd\":"
		out.RawString(prefix)
		out.Int(int(in.YearEnd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PreviewContent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PreviewContent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PreviewContent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PreviewContent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto3(l, v)
}
func easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto4(in *jlexer.Lexer, out *PersonPreviewWithPhoto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "enName":
			out.EnName = string(in.String())
		case "photoURL":
			out.PhotoURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto4(out *jwriter.Writer, in PersonPreviewWithPhoto) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"enName\":"
		out.RawString(prefix)
		out.String(string(in.EnName))
	}
	{
		const prefix string = ",\"photoURL\":"
		out.RawString(prefix)
		out.String(string(in.PhotoURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PersonPreviewWithPhoto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PersonPreviewWithPhoto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PersonPreviewWithPhoto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PersonPreviewWithPhoto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto4(l, v)
}
func easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto5(in *jlexer.Lexer, out *PersonPreview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "enName":
			out.EnName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto5(out *jwriter.Writer, in PersonPreview) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"enName\":"
		out.RawString(prefix)
		out.String(string(in.EnName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PersonPreview) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PersonPreview) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PersonPreview) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PersonPreview) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto5(l, v)
}
func easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto6(in *jlexer.Lexer, out *Person) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "enName":
			out.EnName = string(in.String())
		case "birthDate":
			if in.IsNull() {
				in.Skip()
				out.BirthDate = nil
			} else {
				if out.BirthDate == nil {
					out.BirthDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.BirthDate).UnmarshalJSON(data))
				}
			}
		case "deathDate":
			if in.IsNull() {
				in.Skip()
				out.DeathDate = nil
			} else {
				if out.DeathDate == nil {
					out.DeathDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeathDate).UnmarshalJSON(data))
				}
			}
		case "sex":
			out.Sex = string(in.String())
		case "photoURL":
			out.PhotoURL = string(in.String())
		case "height":
			out.Height = int(in.Int())
		case "roles":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Roles = make(map[string][]PreviewContentCardVertical)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v13 []PreviewContentCardVertical
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						in.Delim('[')
						if v13 == nil {
							if !in.IsDelim(']') {
								v13 = make([]PreviewContentCardVertical, 0, 0)
							} else {
								v13 = []PreviewContentCardVertical{}
							}
						} else {
							v13 = (v13)[:0]
						}
						for !in.IsDelim(']') {
							var v14 PreviewContentCardVertical
							(v14).UnmarshalEasyJSON(in)
							v13 = append(v13, v14)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Roles)[key] = v13
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto6(out *jwriter.Writer, in Person) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"enName\":"
		out.RawString(prefix)
		out.String(string(in.EnName))
	}
	if in.BirthDate != nil {
		const prefix string = ",\"birthDate\":"
		out.RawString(prefix)
		out.Raw((*in.BirthDate).MarshalJSON())
	}
	if in.DeathDate != nil {
		const prefix string = ",\"deathDate\":"
		out.RawString(prefix)
		out.Raw((*in.DeathDate).MarshalJSON())
	}
	{
		const prefix string = ",\"sex\":"
		out.RawString(prefix)
		out.String(string(in.Sex))
	}
	if in.PhotoURL != "" {
		const prefix string = ",\"photoURL\":"
		out.RawString(prefix)
		out.String(string(in.PhotoURL))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		if in.Roles == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v15First := true
			for v15Name, v15Value := range in.Roles {
				if v15First {
					v15First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v15Name))
				out.RawByte(':')
				if v15Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v16, v17 := range v15Value {
						if v16 > 0 {
							out.RawByte(',')
						}
						(v17).MarshalEasyJSON(out)
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Person) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Person) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Person) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Person) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto6(l, v)
}
func easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto7(in *jlexer.Lexer, out *MovieContent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "premiere":
			if in.IsNull() {
				in.Skip()
				out.Premiere = nil
			} else {
				if out.Premiere == nil {
					out.Premiere = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Premiere).UnmarshalJSON(data))
				}
			}
		case "duration":
			out.Duration = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto7(out *jwriter.Writer, in MovieContent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Premiere != nil {
		const prefix string = ",\"premiere\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((*in.Premiere).MarshalJSON())
	}
	{
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Duration))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MovieContent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MovieContent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MovieContent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MovieContent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto7(l, v)
}
func easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto8(in *jlexer.Lexer, out *Episode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "episodeNumber":
			out.EpisodeNumber = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "duration":
			out.Duration = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto8(out *jwriter.Writer, in Episode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"episodeNumber\":"
		out.RawString(prefix)
		out.Int(int(in.EpisodeNumber))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int(int(in.Duration))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Episode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Episode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Episode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Episode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto8(l, v)
}
func easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto9(in *jlexer.Lexer, out *Content) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "originalTitle":
			out.OriginalTitle = string(in.String())
		case "slogan":
			out.Slogan = string(in.String())
		case "budget":
			out.Budget = string(in.String())
		case "ageRestriction":
			out.AgeRestriction = int(in.Int())
		case "rating":
			out.Rating = float64(in.Float64())
		case "imdbRating":
			out.IMDBRating = float64(in.Float64())
		case "description":
			out.Description = string(in.String())
		case "facts":
			if in.IsNull() {
				in.Skip()
				out.Facts = nil
			} else {
				in.Delim('[')
				if out.Facts == nil {
					if !in.IsDelim(']') {
						out.Facts = make([]string, 0, 4)
					} else {
						out.Facts = []string{}
					}
				} else {
					out.Facts = (out.Facts)[:0]
				}
				for !in.IsDelim(']') {
					var v18 string
					v18 = string(in.String())
					out.Facts = append(out.Facts, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "trailerLink":
			out.TrailerLink = string(in.String())
		case "backdropURL":
			out.BackdropURL = string(in.String())
		case "picturesURL":
			if in.IsNull() {
				in.Skip()
				out.PicturesURL = nil
			} else {
				in.Delim('[')
				if out.PicturesURL == nil {
					if !in.IsDelim(']') {
						out.PicturesURL = make([]string, 0, 4)
					} else {
						out.PicturesURL = []string{}
					}
				} else {
					out.PicturesURL = (out.PicturesURL)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.PicturesURL = append(out.PicturesURL, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "posterURL":
			out.PosterURL = string(in.String())
		case "countries":
			if in.IsNull() {
				in.Skip()
				out.Countries = nil
			} else {
				in.Delim('[')
				if out.Countries == nil {
					if !in.IsDelim(']') {
						out.Countries = make([]string, 0, 4)
					} else {
						out.Countries = []string{}
					}
				} else {
					out.Countries = (out.Countries)[:0]
				}
				for !in.IsDelim(']') {
					var v20 string
					v20 = string(in.String())
					out.Countries = append(out.Countries, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]string, 0, 4)
					} else {
						out.Genres = []string{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v21 string
					v21 = string(in.String())
					out.Genres = append(out.Genres, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "actors":
			if in.IsNull() {
				in.Skip()
				out.Actors = nil
			} else {
				in.Delim('[')
				if out.Actors == nil {
					if !in.IsDelim(']') {
						out.Actors = make([]PersonPreview, 0, 1)
					} else {
						out.Actors = []PersonPreview{}
					}
				} else {
					out.Actors = (out.Actors)[:0]
				}
				for !in.IsDelim(']') {
					var v22 PersonPreview
					(v22).UnmarshalEasyJSON(in)
					out.Actors = append(out.Actors, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "directors":
			if in.IsNull() {
				in.Skip()
				out.Directors = nil
			} else {
				in.Delim('[')
				if out.Directors == nil {
					if !in.IsDelim(']') {
						out.Directors = make([]PersonPreview, 0, 1)
					} else {
						out.Directors = []PersonPreview{}
					}
				} else {
					out.Directors = (out.Directors)[:0]
				}
				for !in.IsDelim(']') {
					var v23 PersonPreview
					(v23).UnmarshalEasyJSON(in)
					out.Directors = append(out.Directors, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "producers":
			if in.IsNull() {
				in.Skip()
				out.Producers = nil
			} else {
				in.Delim('[')
				if out.Producers == nil {
					if !in.IsDelim(']') {
						out.Producers = make([]PersonPreview, 0, 1)
					} else {
						out.Producers = []PersonPreview{}
					}
				} else {
					out.Producers = (out.Producers)[:0]
				}
				for !in.IsDelim(']') {
					var v24 PersonPreview
					(v24).UnmarshalEasyJSON(in)
					out.Producers = append(out.Producers, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "writers":
			if in.IsNull() {
				in.Skip()
				out.Writers = nil
			} else {
				in.Delim('[')
				if out.Writers == nil {
					if !in.IsDelim(']') {
						out.Writers = make([]PersonPreview, 0, 1)
					} else {
						out.Writers = []PersonPreview{}
					}
				} else {
					out.Writers = (out.Writers)[:0]
				}
				for !in.IsDelim(']') {
					var v25 PersonPreview
					(v25).UnmarshalEasyJSON(in)
					out.Writers = append(out.Writers, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "operators":
			if in.IsNull() {
				in.Skip()
				out.Operators = nil
			} else {
				in.Delim('[')
				if out.Operators == nil {
					if !in.IsDelim(']') {
						out.Operators = make([]PersonPreview, 0, 1)
					} else {
						out.Operators = []PersonPreview{}
					}
				} else {
					out.Operators = (out.Operators)[:0]
				}
				for !in.IsDelim(']') {
					var v26 PersonPreview
					(v26).UnmarshalEasyJSON(in)
					out.Operators = append(out.Operators, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "composers":
			if in.IsNull() {
				in.Skip()
				out.Composers = nil
			} else {
				in.Delim('[')
				if out.Composers == nil {
					if !in.IsDelim(']') {
						out.Composers = make([]PersonPreview, 0, 1)
					} else {
						out.Composers = []PersonPreview{}
					}
				} else {
					out.Composers = (out.Composers)[:0]
				}
				for !in.IsDelim(']') {
					var v27 PersonPreview
					(v27).UnmarshalEasyJSON(in)
					out.Composers = append(out.Composers, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "editors":
			if in.IsNull() {
				in.Skip()
				out.Editors = nil
			} else {
				in.Delim('[')
				if out.Editors == nil {
					if !in.IsDelim(']') {
						out.Editors = make([]PersonPreview, 0, 1)
					} else {
						out.Editors = []PersonPreview{}
					}
				} else {
					out.Editors = (out.Editors)[:0]
				}
				for !in.IsDelim(']') {
					var v28 PersonPreview
					(v28).UnmarshalEasyJSON(in)
					out.Editors = append(out.Editors, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "type":
			out.Type = string(in.String())
		case "movie":
			(out.Movie).UnmarshalEasyJSON(in)
		case "series":
			(out.Series).UnmarshalEasyJSON(in)
		case "similarContent":
			if in.IsNull() {
				in.Skip()
				out.SimilarContent = nil
			} else {
				in.Delim('[')
				if out.SimilarContent == nil {
					if !in.IsDelim(']') {
						out.SimilarContent = make([]PreviewContentCardVertical, 0, 0)
					} else {
						out.SimilarContent = []PreviewContentCardVertical{}
					}
				} else {
					out.SimilarContent = (out.SimilarContent)[:0]
				}
				for !in.IsDelim(']') {
					var v29 PreviewContentCardVertical
					(v29).UnmarshalEasyJSON(in)
					out.SimilarContent = append(out.SimilarContent, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto9(out *jwriter.Writer, in Content) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"originalTitle\":"
		out.RawString(prefix)
		out.String(string(in.OriginalTitle))
	}
	if in.Slogan != "" {
		const prefix string = ",\"slogan\":"
		out.RawString(prefix)
		out.String(string(in.Slogan))
	}
	if in.Budget != "" {
		const prefix string = ",\"budget\":"
		out.RawString(prefix)
		out.String(string(in.Budget))
	}
	{
		const prefix string = ",\"ageRestriction\":"
		out.RawString(prefix)
		out.Int(int(in.AgeRestriction))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rating))
	}
	{
		const prefix string = ",\"imdbRating\":"
		out.RawString(prefix)
		out.Float64(float64(in.IMDBRating))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"facts\":"
		out.RawString(prefix)
		if in.Facts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v30, v31 := range in.Facts {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.String(string(v31))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"trailerLink\":"
		out.RawString(prefix)
		out.String(string(in.TrailerLink))
	}
	{
		const prefix string = ",\"backdropURL\":"
		out.RawString(prefix)
		out.String(string(in.BackdropURL))
	}
	{
		const prefix string = ",\"picturesURL\":"
		out.RawString(prefix)
		if in.PicturesURL == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.PicturesURL {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"posterURL\":"
		out.RawString(prefix)
		out.String(string(in.PosterURL))
	}
	{
		const prefix string = ",\"countries\":"
		out.RawString(prefix)
		if in.Countries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.Countries {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.String(string(v35))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"genres\":"
		out.RawString(prefix)
		if in.Genres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.Genres {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.String(string(v37))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"actors\":"
		out.RawString(prefix)
		if in.Actors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Actors {
				if v38 > 0 {
					out.RawByte(',')
				}
				(v39).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"directors\":"
		out.RawString(prefix)
		if in.Directors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v40, v41 := range in.Directors {
				if v40 > 0 {
					out.RawByte(',')
				}
				(v41).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"producers\":"
		out.RawString(prefix)
		if in.Producers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v42, v43 := range in.Producers {
				if v42 > 0 {
					out.RawByte(',')
				}
				(v43).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"writers\":"
		out.RawString(prefix)
		if in.Writers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.Writers {
				if v44 > 0 {
					out.RawByte(',')
				}
				(v45).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"operators\":"
		out.RawString(prefix)
		if in.Operators == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v46, v47 := range in.Operators {
				if v46 > 0 {
					out.RawByte(',')
				}
				(v47).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"composers\":"
		out.RawString(prefix)
		if in.Composers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v48, v49 := range in.Composers {
				if v48 > 0 {
					out.RawByte(',')
				}
				(v49).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"editors\":"
		out.RawString(prefix)
		if in.Editors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.Editors {
				if v50 > 0 {
					out.RawByte(',')
				}
				(v51).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	if true {
		const prefix string = ",\"movie\":"
		out.RawString(prefix)
		(in.Movie).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"series\":"
		out.RawString(prefix)
		(in.Series).MarshalEasyJSON(out)
	}
	if len(in.SimilarContent) != 0 {
		const prefix string = ",\"similarContent\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v52, v53 := range in.SimilarContent {
				if v52 > 0 {
					out.RawByte(',')
				}
				(v53).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Content) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Content) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson344736e9EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Content) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Content) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson344736e9DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto9(l, v)
}
