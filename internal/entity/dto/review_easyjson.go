// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(in *jlexer.Lexer, out *UserReviewResponseList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "me":
			out.Me = bool(in.Bool())
		case "reviews":
			if in.IsNull() {
				in.Skip()
				out.Reviews = nil
			} else {
				in.Delim('[')
				if out.Reviews == nil {
					if !in.IsDelim(']') {
						out.Reviews = make([]ReviewResponse, 0, 0)
					} else {
						out.Reviews = []ReviewResponse{}
					}
				} else {
					out.Reviews = (out.Reviews)[:0]
				}
				for !in.IsDelim(']') {
					var v1 ReviewResponse
					(v1).UnmarshalEasyJSON(in)
					out.Reviews = append(out.Reviews, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "page":
			out.Page = int(in.Int())
		case "count":
			out.Count = int(in.Int())
		case "pages":
			out.Pages = int(in.Int())
		case "total":
			out.Total = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(out *jwriter.Writer, in UserReviewResponseList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"me\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Me))
	}
	{
		const prefix string = ",\"reviews\":"
		out.RawString(prefix)
		if in.Reviews == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Reviews {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"page\":"
		out.RawString(prefix)
		out.Int(int(in.Page))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"pages\":"
		out.RawString(prefix)
		out.Int(int(in.Pages))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int(int(in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserReviewResponseList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserReviewResponseList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserReviewResponseList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserReviewResponseList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(l, v)
}
func easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(in *jlexer.Lexer, out *ReviewUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reviewID":
			out.ReviewID = int(in.Int())
		case "rating":
			out.Rating = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(out *jwriter.Writer, in ReviewUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reviewID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ReviewID))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Int(int(in.Rating))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReviewUpdateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReviewUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReviewUpdateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReviewUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(l, v)
}
func easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto2(in *jlexer.Lexer, out *ReviewUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userID":
			out.UserID = int(in.Int())
		case "reviewID":
			out.ReviewID = int(in.Int())
		case "rating":
			out.Rating = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto2(out *jwriter.Writer, in ReviewUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"reviewID\":"
		out.RawString(prefix)
		out.Int(int(in.ReviewID))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Int(int(in.Rating))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReviewUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReviewUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReviewUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReviewUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto2(l, v)
}
func easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto3(in *jlexer.Lexer, out *ReviewResponseList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reviews":
			if in.IsNull() {
				in.Skip()
				out.Reviews = nil
			} else {
				in.Delim('[')
				if out.Reviews == nil {
					if !in.IsDelim(']') {
						out.Reviews = make([]ReviewResponse, 0, 0)
					} else {
						out.Reviews = []ReviewResponse{}
					}
				} else {
					out.Reviews = (out.Reviews)[:0]
				}
				for !in.IsDelim(']') {
					var v4 ReviewResponse
					(v4).UnmarshalEasyJSON(in)
					out.Reviews = append(out.Reviews, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "page":
			out.Page = int(in.Int())
		case "count":
			out.Count = int(in.Int())
		case "pages":
			out.Pages = int(in.Int())
		case "total":
			out.Total = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto3(out *jwriter.Writer, in ReviewResponseList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reviews\":"
		out.RawString(prefix[1:])
		if in.Reviews == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Reviews {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"page\":"
		out.RawString(prefix)
		out.Int(int(in.Page))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"pages\":"
		out.RawString(prefix)
		out.Int(int(in.Pages))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int(int(in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReviewResponseList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReviewResponseList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReviewResponseList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReviewResponseList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto3(l, v)
}
func easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto4(in *jlexer.Lexer, out *ReviewResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "authorName":
			out.AuthorName = string(in.String())
		case "authorAvatar":
			out.AuthorAvatar = string(in.String())
		case "contentName":
			out.ContentName = string(in.String())
		case "id":
			out.ID = int(in.Int())
		case "authorID":
			out.AuthorID = int(in.Int())
		case "contentID":
			out.ContentID = int(in.Int())
		case "rating":
			out.Rating = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "createdAt":
			out.CreatedAt = string(in.String())
		case "likes":
			out.Likes = int(in.Int())
		case "dislikes":
			out.Dislikes = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto4(out *jwriter.Writer, in ReviewResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"authorName\":"
		out.RawString(prefix[1:])
		out.String(string(in.AuthorName))
	}
	{
		const prefix string = ",\"authorAvatar\":"
		out.RawString(prefix)
		out.String(string(in.AuthorAvatar))
	}
	{
		const prefix string = ",\"contentName\":"
		out.RawString(prefix)
		out.String(string(in.ContentName))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"authorID\":"
		out.RawString(prefix)
		out.Int(int(in.AuthorID))
	}
	{
		const prefix string = ",\"contentID\":"
		out.RawString(prefix)
		out.Int(int(in.ContentID))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Int(int(in.Rating))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		out.Int(int(in.Likes))
	}
	{
		const prefix string = ",\"dislikes\":"
		out.RawString(prefix)
		out.Int(int(in.Dislikes))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReviewResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReviewResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReviewResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReviewResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto4(l, v)
}
func easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto5(in *jlexer.Lexer, out *ReviewCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contentID":
			out.ContentID = int(in.Int())
		case "rating":
			out.Rating = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto5(out *jwriter.Writer, in ReviewCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contentID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ContentID))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Int(int(in.Rating))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReviewCreateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReviewCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReviewCreateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReviewCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto5(l, v)
}
func easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto6(in *jlexer.Lexer, out *ReviewCreate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userID":
			out.UserID = int(in.Int())
		case "contentID":
			out.ContentID = int(in.Int())
		case "rating":
			out.Rating = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto6(out *jwriter.Writer, in ReviewCreate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"contentID\":"
		out.RawString(prefix)
		out.Int(int(in.ContentID))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Int(int(in.Rating))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReviewCreate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReviewCreate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReviewCreate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReviewCreate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto6(l, v)
}
func easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto7(in *jlexer.Lexer, out *Review) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "authorID":
			out.AuthorID = int(in.Int())
		case "contentID":
			out.ContentID = int(in.Int())
		case "rating":
			out.Rating = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "createdAt":
			out.CreatedAt = string(in.String())
		case "likes":
			out.Likes = int(in.Int())
		case "dislikes":
			out.Dislikes = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto7(out *jwriter.Writer, in Review) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"authorID\":"
		out.RawString(prefix)
		out.Int(int(in.AuthorID))
	}
	{
		const prefix string = ",\"contentID\":"
		out.RawString(prefix)
		out.Int(int(in.ContentID))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Int(int(in.Rating))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		out.Int(int(in.Likes))
	}
	{
		const prefix string = ",\"dislikes\":"
		out.RawString(prefix)
		out.Int(int(in.Dislikes))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Review) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Review) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f096870EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Review) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Review) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f096870DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto7(l, v)
}
