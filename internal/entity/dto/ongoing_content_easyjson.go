// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonAd4d7fbDecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(in *jlexer.Lexer, out *ReleaseYearsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "years":
			if in.IsNull() {
				in.Skip()
				out.Years = nil
			} else {
				in.Delim('[')
				if out.Years == nil {
					if !in.IsDelim(']') {
						out.Years = make([]int, 0, 8)
					} else {
						out.Years = []int{}
					}
				} else {
					out.Years = (out.Years)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int
					v1 = int(in.Int())
					out.Years = append(out.Years, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAd4d7fbEncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(out *jwriter.Writer, in ReleaseYearsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"years\":"
		out.RawString(prefix[1:])
		if in.Years == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Years {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReleaseYearsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAd4d7fbEncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReleaseYearsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAd4d7fbEncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReleaseYearsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAd4d7fbDecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReleaseYearsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAd4d7fbDecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(l, v)
}
func easyjsonAd4d7fbDecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(in *jlexer.Lexer, out *PreviewOngoingContentList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ongoing_content_list":
			if in.IsNull() {
				in.Skip()
				out.OnGoingContentList = nil
			} else {
				in.Delim('[')
				if out.OnGoingContentList == nil {
					if !in.IsDelim(']') {
						out.OnGoingContentList = make([]*PreviewOngoingContent, 0, 8)
					} else {
						out.OnGoingContentList = []*PreviewOngoingContent{}
					}
				} else {
					out.OnGoingContentList = (out.OnGoingContentList)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *PreviewOngoingContent
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(PreviewOngoingContent)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.OnGoingContentList = append(out.OnGoingContentList, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAd4d7fbEncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(out *jwriter.Writer, in PreviewOngoingContentList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ongoing_content_list\":"
		out.RawString(prefix[1:])
		if in.OnGoingContentList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.OnGoingContentList {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PreviewOngoingContentList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAd4d7fbEncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PreviewOngoingContentList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAd4d7fbEncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PreviewOngoingContentList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAd4d7fbDecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PreviewOngoingContentList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAd4d7fbDecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(l, v)
}
func easyjsonAd4d7fbDecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto2(in *jlexer.Lexer, out *PreviewOngoingContent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "genre":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]string, 0, 4)
					} else {
						out.Genres = []string{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Genres = append(out.Genres, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "poster":
			out.Poster = string(in.String())
		case "releaseDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ReleaseDate).UnmarshalJSON(data))
			}
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAd4d7fbEncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto2(out *jwriter.Writer, in PreviewOngoingContent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"genre\":"
		out.RawString(prefix)
		if in.Genres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Genres {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"poster\":"
		out.RawString(prefix)
		out.String(string(in.Poster))
	}
	{
		const prefix string = ",\"releaseDate\":"
		out.RawString(prefix)
		out.Raw((in.ReleaseDate).MarshalJSON())
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PreviewOngoingContent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAd4d7fbEncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PreviewOngoingContent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAd4d7fbEncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PreviewOngoingContent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAd4d7fbDecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PreviewOngoingContent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAd4d7fbDecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto2(l, v)
}
func easyjsonAd4d7fbDecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto3(in *jlexer.Lexer, out *IsOngoingContentFinishedResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "is_finished":
			out.IsFinished = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAd4d7fbEncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto3(out *jwriter.Writer, in IsOngoingContentFinishedResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"is_finished\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsFinished))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IsOngoingContentFinishedResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAd4d7fbEncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IsOngoingContentFinishedResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAd4d7fbEncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IsOngoingContentFinishedResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAd4d7fbDecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IsOngoingContentFinishedResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAd4d7fbDecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto3(l, v)
}
