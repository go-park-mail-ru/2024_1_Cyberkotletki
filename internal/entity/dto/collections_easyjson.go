// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDaeb1d75DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(in *jlexer.Lexer, out *Genres) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]string, 0, 4)
					} else {
						out.Genres = []string{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Genres = append(out.Genres, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDaeb1d75EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(out *jwriter.Writer, in Genres) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"genres\":"
		out.RawString(prefix[1:])
		if in.Genres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Genres {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Genres) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDaeb1d75EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Genres) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDaeb1d75EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Genres) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDaeb1d75DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Genres) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDaeb1d75DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto(l, v)
}
func easyjsonDaeb1d75DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(in *jlexer.Lexer, out *Collection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "genre":
			out.Genre = string(in.String())
		case "ids":
			if in.IsNull() {
				in.Skip()
				out.ContentIdentifiers = nil
			} else {
				in.Delim('[')
				if out.ContentIdentifiers == nil {
					if !in.IsDelim(']') {
						out.ContentIdentifiers = make([]int, 0, 8)
					} else {
						out.ContentIdentifiers = []int{}
					}
				} else {
					out.ContentIdentifiers = (out.ContentIdentifiers)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int
					v4 = int(in.Int())
					out.ContentIdentifiers = append(out.ContentIdentifiers, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDaeb1d75EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(out *jwriter.Writer, in Collection) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"genre\":"
		out.RawString(prefix[1:])
		out.String(string(in.Genre))
	}
	{
		const prefix string = ",\"ids\":"
		out.RawString(prefix)
		if in.ContentIdentifiers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.ContentIdentifiers {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Collection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDaeb1d75EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Collection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDaeb1d75EncodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Collection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDaeb1d75DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Collection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDaeb1d75DecodeGithubComGoParkMailRu20241CyberkotletkiInternalEntityDto1(l, v)
}
