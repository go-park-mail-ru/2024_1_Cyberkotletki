-- Создание таблицы audience
CREATE TABLE IF NOT EXISTS audience (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content_id INT NOT NULL,
    size_in_thousands DECIMAL(10,2) CONSTRAINT size_in_thousands_positive CHECK (size_in_thousands > 0) NOT NULL,
    country TEXT CONSTRAINT country_length CHECK (LENGTH(country) <= 30) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (content_id) REFERENCES content(id)
    );

-- Создание таблицы boxoffice
CREATE TABLE IF NOT EXISTS boxoffice (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content_id INT NOT NULL,
    country TEXT CONSTRAINT boxoffice_country_length CHECK (LENGTH(country) <= 30) NOT NULL UNIQUE,
    revenue DECIMAL(10,2) CONSTRAINT revenue_positive CHECK (revenue > 0) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (content_id) REFERENCES content(id)
    );

-- Создание таблицы country
CREATE TABLE IF NOT EXISTS country (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT CONSTRAINT name_length CHECK (LENGTH(name) <= 30) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

-- Создание таблицы genre
CREATE TABLE IF NOT EXISTS genre (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT CONSTRAINT genre_name_length CHECK (LENGTH(name) <= 30) UNIQUE,
    name_ru TEXT CONSTRAINT genre_name_ru_length CHECK (LENGTH(name_ru) <= 30) UNIQUE NOT NULL ,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

-- Создание таблицы birthplace
CREATE TABLE IF NOT EXISTS birthplace (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    city TEXT CONSTRAINT city_length CHECK (LENGTH(city) <= 30),
    region TEXT CONSTRAINT region_length CHECK (LENGTH(region) <= 30),
    country TEXT CONSTRAINT birthplace_country_length CHECK (LENGTH(country) <= 30),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT city_region_country_unique UNIQUE (city, region, country)
    );

-- Создание таблицы person
CREATE TABLE IF NOT EXISTS person (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name TEXT CONSTRAINT person_first_name_length CHECK (LENGTH(last_name) <= 30) NOT NULL,
    last_name TEXT CONSTRAINT person_last_name_length CHECK (LENGTH(last_name) <= 30) NOT NULL,
    birth_date TIMESTAMP,
    death_date TIMESTAMP CHECK (death_date > birth_date),
    birthplace_id INT NOT NULL,
    start_career TIMESTAMP,
    end_career TIMESTAMP CHECK (end_career > start_career),
    gender CHAR(1) CONSTRAINT person_gender CHECK (gender='M' OR gender='F') NOT NULL,
    height DECIMAL(10,2) CONSTRAINT height_positive CHECK (height > 0),
    spouse TEXT CONSTRAINT person_spouse_length CHECK (LENGTH(spouse) <= 150),
    children TEXT CONSTRAINT person_children_length CHECK (LENGTH(children) <= 150),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (birthplace_id) REFERENCES birthplace(id)
    );

-- Создание таблицы role
CREATE TABLE IF NOT EXISTS role (
                                    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                    name TEXT CONSTRAINT role_name_length CHECK (LENGTH(name) <= 50) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

-- Создание таблицы film
CREATE TABLE IF NOT EXISTS film (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content_id INT NOT NULL UNIQUE,
    year INT CONSTRAINT film_year_positive CHECK (year > 0),
    duration INT CONSTRAINT film_duration_positive CHECK (duration > 0),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (content_id) REFERENCES content(id)
    );

-- Создание таблицы content
CREATE TABLE IF NOT EXISTS content (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT CONSTRAINT title_length CHECK (LENGTH(title) <= 150) NOT NULL ,
    original_title TEXT CONSTRAINT original_title_length CHECK (LENGTH(original_title) <= 150),
    budget INT CONSTRAINT content_budget_positive CHECK (budget > 0),
    marketing INT CONSTRAINT content_marketing_positive CHECK (marketing > 0),
    premiere TIMESTAMP,
    release TIMESTAMP,
    age_restriction INT CONSTRAINT content_age_restriction_positive CHECK (age_restriction >= 0),
    imdb INT,
    description TEXT CONSTRAINT description_length CHECK (LENGTH(description) <= 30),
    poster TEXT CONSTRAINT poster_length CHECK (LENGTH(poster) <= 30),
    playback TEXT CONSTRAINT playback_length CHECK (LENGTH(playback) <= 30),
    type CHAR(1) CONSTRAINT type CHECK (type = 'F' OR type = 'S') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

-- Создание таблицы status
CREATE TABLE IF NOT EXISTS status (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    status TEXT CONSTRAINT status_length CHECK (LENGTH(status) <= 15) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

-- Создание таблицы episode
CREATE TABLE IF NOT EXISTS episode (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    season_id INT NOT NULL,
    description TEXT CONSTRAINT episode_description_length CHECK (LENGTH(description) <= 500),
    episode_number INT CONSTRAINT episode_episode_number_positive CHECK (episode_number > 0 ) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (season_id) REFERENCES season(id)
    );

-- Создание таблицы season
CREATE TABLE IF NOT EXISTS season (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content_id INT NOT NULL,
    series_id INT NOT NULL,
    year_start INT CONSTRAINT season_year_start_positive CHECK (year_start > 0),
    year_end INT CHECK (year_end >= year_start) CONSTRAINT season_year_end_positive CHECK (year_end > 0),
    count_episodes INT CONSTRAINT season_count_episodes_positive CHECK (count_episodes > 0),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (content_id) REFERENCES content(id),
    FOREIGN KEY (series_id) REFERENCES series(id)
    );

-- Создание таблицы series
CREATE TABLE IF NOT EXISTS series (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT CONSTRAINT series_title_length CHECK (LENGTH(title) <= 150) NOT NULL,
    year_start INT CONSTRAINT series_year_start_positive CHECK (year_start > 0),
    year_end INT CHECK (year_end >= year_start) CONSTRAINT series_year_end_positive CHECK (year_end > 0),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

-- Создание таблицы users
CREATE TABLE IF NOT EXISTS users (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT CONSTRAINT user_name_length CHECK (LENGTH(name) <= 150),
    email TEXT CONSTRAINT email_length CHECK (LENGTH(email) <= 150) UNIQUE NOT NULL,
    password_hashed TEXT CONSTRAINT password_hashed_length CHECK (LENGTH(password_hashed) <= 150) NOT NULL,
    salt_password TEXT CONSTRAINT salt_password_length CHECK (LENGTH(salt_password) <= 150) NOT NULL,
    birth_date TIMESTAMP,
    date_registered TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

-- Создание таблицы comment
CREATE TABLE IF NOT EXISTS comment (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INT NOT NULL,
    content_id INT NOT NULL,
    title TEXT CONSTRAINT comment_title_length CHECK (LENGTH(title) > 0 AND LENGTH(title) <= 50)NOT NULL,
    text TEXT CONSTRAINT comment_text_length CHECK (LENGTH(text) > 0 AND LENGTH(text) <= 1000) NOT NULL,
    rating_user INT CONSTRAINT rating_user_positive CHECK (rating_user > 0 AND rating_user <= 10)  NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (content_id) REFERENCES content(id)
    );

-- Создание таблицы nomination
CREATE TABLE IF NOT EXISTS nomination (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT CONSTRAINT nomination_title_length CHECK (LENGTH(title) > 0 AND LENGTH(title) <= 50) NOT NULL,
    content_id INT NOT NULL,
    person_id INT,
    award_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (content_id) REFERENCES content(id),
    FOREIGN KEY (person_id) REFERENCES person(id),
    FOREIGN KEY (award_id) REFERENCES award(id)
    );

-- Создание таблицы award
CREATE TABLE IF NOT EXISTS award (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    year INT CONSTRAINT award_year_positive CHECK (year > 0),
    name TEXT CONSTRAINT award_name_length CHECK (LENGTH(name) > 0 AND LENGTH(name) <= 50) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

-- Создание таблицы rating
CREATE TABLE IF NOT EXISTS rating (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INT NOT NULL,
    value INT CONSTRAINT rating_value_positive CHECK (value > 0 AND value <= 10),
    type CHAR(1),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users (id)
    );

-- Создание таблицы rating_type
CREATE TABLE IF NOT EXISTS rating_type (
    rating_id INT NOT NULL,
    entity_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (rating_id) REFERENCES rating(id)
    );

-- Создание таблицы comment_likes
CREATE TABLE IF NOT EXISTS comment_likes (
    comment_id INT NOT NULL,
    user_id INT NOT NULL,
    value BOOLEAN NOT NULL CONSTRAINT value_positive CHECK (value = TRUE OR value = FALSE),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (comment_id) REFERENCES comment(id),
    FOREIGN KEY (user_id) REFERENCES users (id),
    CONSTRAINT comment_likes_unique UNIQUE (comment_id, user_id)
    );

-- Создание таблицы saved_person
CREATE TABLE IF NOT EXISTS saved_person (
    person_id INT NOT NULL,
    user_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (person_id) REFERENCES person(id),
    FOREIGN KEY (user_id) REFERENCES users (id),
    CONSTRAINT saved_person_unique UNIQUE (person_id, user_id)
    );

-- Создание таблицы content_status
CREATE TABLE IF NOT EXISTS content_status (
    content_id INT NOT NULL,
    user_id INT NOT NULL,
    status_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (content_id) REFERENCES content(id),
    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (status_id) REFERENCES status(id)
    );

-- Создание таблицы genre_content
CREATE TABLE IF NOT EXISTS genre_content (
    genre_id INT NOT NULL,
    content_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (genre_id) REFERENCES genre(id),
    FOREIGN KEY (content_id) REFERENCES content(id),
    CONSTRAINT genre_content_unique UNIQUE (genre_id, content_id)
    );

-- Создание таблицы country_content
CREATE TABLE IF NOT EXISTS country_content (
    country_id INT NOT NULL,
    content_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (country_id) REFERENCES country(id),
    FOREIGN KEY (content_id) REFERENCES content(id),
    CONSTRAINT country_content_unique UNIQUE (country_id, content_id)
    );

-- Создание таблицы content_person
CREATE TABLE IF NOT EXISTS content_person (
    content_id INT NOT NULL,
    person_id INT NOT NULL,
    role_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (content_id) REFERENCES content(id),
    FOREIGN KEY (person_id) REFERENCES person(id),
    FOREIGN KEY (role_id) REFERENCES role(id),
    CONSTRAINT content_person_unique UNIQUE (content_id, person_id, role_id)
    );

-- Удаление таблиц
-- DROP TABLE IF EXISTS content_person;
-- DROP TABLE IF EXISTS country_content;
-- DROP TABLE IF EXISTS genre_content;
-- DROP TABLE IF EXISTS content_status;
-- DROP TABLE IF EXISTS saved_person;
-- DROP TABLE IF EXISTS comment_likes;
-- DROP TABLE IF EXISTS rating_type;
-- DROP TABLE IF EXISTS rating;
-- DROP TABLE IF EXISTS award;
-- DROP TABLE IF EXISTS nomination;
-- DROP TABLE IF EXISTS comment;
-- DROP TABLE IF EXISTS users;
-- DROP TABLE IF EXISTS series;
-- DROP TABLE IF EXISTS season;
-- DROP TABLE IF EXISTS episode;
-- DROP TABLE IF EXISTS status;
-- DROP TABLE IF EXISTS content;
-- DROP TABLE IF EXISTS film;
-- DROP TABLE IF EXISTS role;
-- DROP TABLE IF EXISTS person;
-- DROP TABLE IF EXISTS birthplace;
-- DROP TABLE IF EXISTS genre;
-- DROP TABLE IF EXISTS boxoffice;
-- DROP TABLE IF EXISTS country;
-- DROP TABLE IF EXISTS audience;